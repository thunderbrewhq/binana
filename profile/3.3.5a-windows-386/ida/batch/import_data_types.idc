#include <idc.idc>

static import_data_types() {
	// Give types to data labels
	apply_type(0x00401010, "void* __stdcall func(uint32_t count)");
	apply_type(0x00401030, "void __stdcall func(void* ptr)");
	apply_type(0x00401050, "CDataStore* __thiscall func(CDataStore* this)");
	apply_type(0x004033B0, "void __stdcall ClientKillTimer(uint32_t timerId, void* handlerAddress, char* handlerName)");
	apply_type(0x00403600, "void __stdcall func(char* manifest@<eax>)");
	apply_type(0x00407F40, "C44Matrix* __thiscall func(C44Matrix* this)");
	apply_type(0x00407F80, "float __thiscall func(C44Matrix* this, C44Matrix* rhs)");
	apply_type(0x00408070, "void __stdcall func(float* minX, float* maxX, float* minY, float* maxY, float* minZ, float* maxZ)");
	apply_type(0x00409670, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00421880, "int32_t __stdcall func(char* buffer, int32_t buffersize)");
	apply_type(0x004271D0, "bool __stdcall func(char* name, Blizzard__File__FileInfo* info)");
	apply_type(0x00427250, "Blizzard__File__FileInfo* __stdcall func(Blizzard__File__StreamRecord* file)");
	apply_type(0x004272C0, "bool __stdcall func(Blizzard__File__StreamRecord* file, Blizzard__File__FileInfo* info)");
	apply_type(0x00427560, "bool __stdcall func(char* src, char* dst)");
	apply_type(0x004275B0, "bool __stdcall func(char* src, char* dst, bool overwrite)");
	apply_type(0x00427660, "bool __stdcall func(char* name, void* param, Blizzard__File__ProcessDirCallback callback, bool flag)");
	apply_type(0x00427720, "bool __stdcall func(Blizzard__File__StreamRecord* file, void* data, int64_t offset, uint32_t* count)");
	apply_type(0x00427910, "bool __stdcall func(Blizzard__File__StreamRecord* file, int64_t offset, int32_t whence)");
	apply_type(0x004279B0, "bool __stdcall func(Blizzard__File__StreamRecord* file, void *data, uint32_t* count)");
	apply_type(0x00427CC0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00427D10, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00428210, "bool __stdcall func(char* name, char* pattern)");
	apply_type(0x00428500, "char* __stdcall func(char* str)");
	apply_type(0x00428670, "int32_t __stdcall func(char* dst, const char* src, int32_t count)");
	apply_type(0x004286C0, "int32_t __stdcall func(char* dst, char* src, int32_t count)");
	apply_type(0x00428940, "int32_t __stdcall func(uint8_t* dst, uint32_t dstmaxchars, const uint16_t* src, uint32_t srcmaxchars, uint32_t* dstchars, uint32_t* srcchars)");
	apply_type(0x00428B00, "int32_t __stdcall func(uint16_t* dst, uint32_t dstmaxchars, const uint8_t* src, uint32_t srcmaxchars, uint32_t* dstchars, uint32_t* srcchars)");
	apply_type(0x00428F00, "Blizzard__Time__Timestamp __stdcall func(uint64_t fileTime)");
	apply_type(0x0042A9B0, "void __stdcall func(char* src, char* dst, int32_t count)");
	apply_type(0x0042AA00, "void __stdcall func(char* src, char* dst, int32_t count)");
	apply_type(0x0042D440, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x0042D620, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x0042E4B0, "void __stdcall func(char* dst, int32_t count, char separator)");
	apply_type(0x004325C0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00433510, "void __stdcall func(char* a1, int32_t a2, char* a3, char* a4)");
	apply_type(0x00433590, "void __stdcall func(uint8_t *buffer, uint32_t buffersize, const char *str)");
	apply_type(0x00435580, "void __stdcall func(Blizzard__File__StreamRecord* file)");
	apply_type(0x004356B0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00435790, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00435890, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x004359C0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x0044FA10, "bool __stdcall func(Blizzard__File__ProcessDirParms* dirwalkparms)");
	apply_type(0x00453480, "bool __stdcall func()");
	apply_type(0x004549B0, "bool __stdcall func(uint32_t flags, DWORD* sharemode, DWORD* desiredaccess, DWORD* creationdisposition, DWORD* flagsandattributes)");
	apply_type(0x00454A50, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00454AC0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00454AE0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00454B50, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00454CB0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00454CF0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00454E70, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00454FD0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455050, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x004550C0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455130, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x004554C0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455730, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x004558F0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455910, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455A30, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455B10, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455BA0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455CA0, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00455D20, "int32_t __stdcall func(Blizzard__File__Filesystem* fs, System_File__Stacked__FileParms* parms)");
	apply_type(0x00461B00, "void __stdcall func(HOSFILE fileHandle)");
	apply_type(0x00461B10, "int32_t __stdcall func(char* path)");
	apply_type(0x00461B30, "int32_t __stdcall func(char* dirName)");
	apply_type(0x00461B50, "int32_t __stdcall func(HOSFILE fileHandle, void* buffer, uint32_t bytesToRead, uint32_t* bytesRead)");
	apply_type(0x00461B90, "int32_t __stdcall func(HOSFILE fileHandle, void* buffer, uint32_t bytesToWrite, uint32_t* bytesWritten)");
	apply_type(0x00461BD0, "void __stdcall func(HOSFILE fileHandle)");
	apply_type(0x00461C00, "uint32_t __stdcall func(char* fileName)");
	apply_type(0x00461C40, "int32_t __stdcall func(char* fileName, uint32_t attributes)");
	apply_type(0x00461C70, "int32_t __stdcall func(char* existingFileName, char* newFileName)");
	apply_type(0x00461CA0, "int32_t __stdcall func(char* existingFileName, char* newFileName, int32_t failIfExists)");
	apply_type(0x00461CE0, "int32_t __stdcall func(char* fileName)");
	apply_type(0x00461D10, "int32_t __stdcall func(char* pathName, int32_t recursive)");
	apply_type(0x00461D40, "int32_t __stdcall func(char* pathName)");
	apply_type(0x00461D70, "int32_t __stdcall func(char* pathName, uint32_t flags)");
	apply_type(0x00461DB0, "int32_t __stdcall func(char* pathName)");
	apply_type(0x00461DE0, "int32_t __stdcall func(uint32_t buffersize, char* buffer)");
	apply_type(0x00461E10, "bool __stdcall func(Blizzard__File__ProcessDirParms* parms)");
	apply_type(0x00461EF0, "Blizzard__File__Mode __stdcall func(uint32_t desiredAcccess, uint8_t shareMode, uint32_t createDisposition)");
	apply_type(0x00461F70, "char* __stdcall func()");
	apply_type(0x00461FA0, "HOSFILE __stdcall func(char* fileName, uint32_t desiredAccess, uint32_t shareMode, uint32_t createDisposition, uint32_t flagsAndAttributes, uint32_t extendedFileType)");
	apply_type(0x0047B6F0, "int32_t __stdcall func(CMDOPT)");
	apply_type(0x0047B700, "char* __stdcall func(CMDOPT)");
	apply_type(0x0047B720, "int32_t __stdcall func()");
	apply_type(0x0047B9E0, "int __stdcall func(char* dst, uint32_t dstMaxChars, uint16_t* src, uint32_t srcMaxChars, uint32_t* dstChars, uint32_t* srcChars)");
	apply_type(0x0047D0E0, "EvtContext* __thiscall func(TInstanceIdTable_EvtContext* this, uint32_t id, int32_t lockMode, int32_t* findMask)");
	apply_type(0x0047D620, "void __stdcall func(uint32_t timerId, void* handlerFunction, char* functionName)");
	apply_type(0x0047E2F0, "void __usercall func(EvtContext* context@<esi>)");
	apply_type(0x0047E5A0, "EvtContext* __usercall func@<eax>(uint32_t hThread@<edi>)");
	apply_type(0x0047ED30, "void __stdcall func(uint32_t hThread, EvtContext* context)");
	apply_type(0x004804F0, "void __cdecl func(EvtContext* context, EVENTID id, void* handler, void* param, float priority)");
	apply_type(0x004806A0, "int32_t __cdecl func(EvtContext* context, EVENTID id, void *data, size_t bytes)");
	apply_type(0x00482C20, "void __thiscall func(CSimpleRegion* this)");
	apply_type(0x00483910, "void __thiscall func(CSimpleFontString* this, char* a1, int32_t a2)");
	apply_type(0x00487A10, "void __thiscall func(CSimpleRegion* this, CImVector* color)");
	apply_type(0x00487AB0, "void __thiscall func(CSimpleRegion* this, CImVector* color)");
	apply_type(0x00487BF0, "void __thiscall func(CSimpleRegion* this)");
	apply_type(0x00487C40, "void __thiscall func(CSimpleRegion* this)");
	apply_type(0x00487CA0, "void __thiscall func(CSimpleRegion* this)");
	apply_type(0x00487D70, "void __thiscall func(CSimpleRegion* this, bool a2)");
	apply_type(0x004880E0, "void __thiscall func(CSimpleRegion* this, CSimpleFrame* frame, uint32_t drawLayer, int32_t show)");
	apply_type(0x004881D0, "void __thiscall func(CSimpleRegion* this)");
	apply_type(0x00488310, "void __thiscall func(CScriptRegion* this)");
	apply_type(0x0048D800, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x0048EA10, "void __thiscall func(CSimpleFrame* this, uint8_t alpha)");
	apply_type(0x00494EE0, "int32_t __thiscall func(CFrameStrata* this, int32_t a2)");
	apply_type(0x00494F30, "void __thiscall func(CFrameStrata* this)");
	apply_type(0x0049F9E0, "void __stdcall func(lua_State* L)");
	apply_type(0x004A2630, "void __thiscall func(CBackdropGenerator* this, CImVector* borderColor)");
	apply_type(0x004A29D0, "void __thiscall func(CBackdropGenerator* this, CRect*)");
	apply_type(0x004A2D40, "void __thiscall func(CBackdropGenerator* this)");
	apply_type(0x004A2E00, "void __thiscall func(CBackdropGenerator* this, CSimpleFrame* a1)");
	apply_type(0x004B5510, "int32_t __stdcall func(uint32_t width, uint32_t height)");
	apply_type(0x004B7220, "MipBits* __stdcall func(PIXEL_FORMAT format, uint32_t width, uint32_t height)");
	apply_type(0x004B7300, "void func(MipBits* image)");
	apply_type(0x004B78A0, "int32_t __usercall func@<eax>(char* ext@<eax>, char* filename, int32_t a3, MipBits** mipBits, uint32_t* width, uint32_t* height, PIXEL_FORMAT* texFormat, int32_t* isOpaque@<ecx>, uint32_t* alphaBits, PIXEL_FORMAT* dataFormat)");
	apply_type(0x004B8070, "int32_t __usercall func@<eax>(char* ext@<eax>, char* filename@<ebx>, int32_t a3, MipBits** mipBits, uint32_t* width, uint32_t* height, uint32_t* isOpaque, uint32_t* alphaBits, PIXEL_FORMAT* dataFormat)");
	apply_type(0x004B81D0, "MipBits* func(const char* filename, uint32_t* width, uint32_t* height, PIXEL_FORMAT* dataFormat, int32_t* isOpaque, CStatus* status, uint32_t* alphaBits, int32_t a8)");
	apply_type(0x004BD9D0, "CGxFont* __stdcall func(HTEXTFONT font)");
	apply_type(0x004BDAA0, "HTEXTBLOCK __stdcall func(HTEXTFONT font, char* text, CImVector* color, C3Vector* pos, float fontHeight, float blockWidth, float blockHeight, uint32_t flags, float charSpacing, float lineSpacing)");
	apply_type(0x004BDBF0, "void __stdcall func(HTEXTBLOCK stringHandle, C2Vector* pos)");
	apply_type(0x004BDD80, "float __stdcall func(HTEXTFONT fontHandle, char* text, float a3, float a4, C2Vector* a5, float a6, float a7, uint32_t flags)");
	apply_type(0x004BE9C0, "HTEXTFONT __stdcall func(char* fontName, uint32_t fontFlags, float fontHeight)");
	apply_type(0x004BF540, "int32_t __thiscall func(CGxStateBom* this, C3Vector* value)");
	apply_type(0x004C1930, "float __thiscall func(C44Matrix* this)");
	apply_type(0x004C1B30, "void __thiscall func(C44Matrix* this, C3Vector* move)");
	apply_type(0x004C1B90, "void __thiscall func(C44Matrix* this, C3Vector* scale)");
	apply_type(0x004C1BF0, "void __thiscall func(C44Matrix* this, float scale)");
	apply_type(0x004C1DE0, "C44Matrix* __thiscall func(C44Matrix* this, C4Quaternion* a)");
	apply_type(0x004C1F00, "C44Matrix* __stdcall func(C44Matrix* __return_ptr result, C44Matrix* l, C44Matrix* r)");
	apply_type(0x004C2120, "C44Matrix* __stdcall func(C44Matrix* __return_ptr result, C44Matrix* l, float a)");
	apply_type(0x004C21B0, "C3Vector* __stdcall func(C3Vector* __return_ptr result, C3Vector* l, C44Matrix* a)");
	apply_type(0x004C2370, "void __thiscall func(C44Matrix* this, C44Matrix* a)");
	apply_type(0x004C2440, "C44Matrix* __thiscall func(C44Matrix* this, C44Matrix* __return_ptr result)");
	apply_type(0x004C3420, "void __thiscall func(C3Vector* this)");
	apply_type(0x004C3600, "void __thiscall func(C3Vector* this)");
	apply_type(0x004C4B80, "void __thiscall func(TSGrowableArray_C3Vector* this, uint32_t count)");
	apply_type(0x00532AF0, "CGxCaps* __thiscall func(CGxDevice* this)");
	apply_type(0x0054EFE0, "void __fastcall func(TSGrowableArray_C2iVector* this, C2iVector* resolution)");
	apply_type(0x0057C340, "void __thiscall func(CGxMatrixStack* this)");
	apply_type(0x0057FDD0, "void __thiscall func(TSGrowableArray_C2Vector* this, uint32_t count)");
	apply_type(0x006160B0, "int32_t __usercall func@<eax>(uint32_t** image@<eax>, MipBits* mipImages@<ecx>, uint32_t width@<edx>, uint32_t height)");
	apply_type(0x00616800, "void __stdcall func(CURSORMODE mode)");
	apply_type(0x00616CA0, "void __thiscall func(TSGrowableArray_CImVector* this, uint32_t count)");
	apply_type(0x006811D0, "int32_t __stdcall func(EGxApi api)");
	apply_type(0x00681210, "int32_t __stdcall func(TSGrowableArray_CGxMonitorMode* modes)");
	apply_type(0x00681220, "int32_t __stdcall func(CGxMonitorMode* mode)");
	apply_type(0x00681630, "void __stdcall func(CGxQuery** query, EGxQueryType type)");
	apply_type(0x00681770, "void __stdcall func(uint32_t maxFPS)");
	apply_type(0x00681790, "void __stdcall func(uint32_t maxFPSBk)");
	apply_type(0x006817B0, "BlitFormat __stdcall func(EGxTexFormat format)");
	apply_type(0x006817C0, "void __stdcall func()");
	apply_type(0x006817E0, "int __stdcall func(char* format, ...)");
	apply_type(0x00681950, "CGxFormat* __thiscall func(CGxFormat* this)");
	apply_type(0x00681A60, "void __stdcall func()");
	apply_type(0x00681AB0, "void __stdcall func(uint32_t indexCount, uint16_t* indices)");
	apply_type(0x00681B00, "void __stdcall func(CGxBuf* buf, EGxVertexBufferFormat format)");
	apply_type(0x00681F60, "void __stdcall func(float minX, float maxX, float minY, float maxY, float minZ, float maxZ)");
	apply_type(0x00682340, "void __stdcall func(EGxPrim primType, uint32_t, uint16_t*)");
	apply_type(0x006823A0, "void __stdcall func(EGxPrim primType, uint32_t indexCount, uint16_t* indices)");
	apply_type(0x00682400, "void __stdcall func(uint32_t vertexCount, C3Vector* pos, uint32_t posStride, C3Vector* normal, uint32_t normalStride, CImVector* color, uint32_t colorStride, C2Vector* tex0, uint32_t tex0Stride, C2Vector* tex1, uint32_t tex1Stride)");
	apply_type(0x006828C0, "void __stdcall func(uint32_t vertexCount, C3Vector* pos, uint32_t posStride, C3Vector* normal, uint32_t normalStride, CImVector* color, uint32_t colorStride, uint8_t* bone, uint32_t boneStride, C2Vector* tex0, uint32_t tex0Stride, C2Vector* tex1, uint32_t tex1Stride)");
	apply_type(0x00682C50, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00682CB0, "void __thiscall func(CGxDevice* this, int32_t (*windowProc)(void*, uint32_t, uintptr_t, intptr_t), CGxFormat* format)");
	apply_type(0x00682CD0, "void __thiscall func(CGxDevice* this, uintptr_t hwnd, CGxFormat* format)");
	apply_type(0x00682CF0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00682D00, "void __thiscall func(CGxDevice* this, uint32_t baseMipLevel)");
	apply_type(0x00682D20, "EGxApi __thiscall func(CGxDevice* this)");
	apply_type(0x00682D30, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00682D40, "int32_t __thiscall func(CGxDevice* this)");
	apply_type(0x00682D70, "CRect* __thiscall func(CGxDevice* this)");
	apply_type(0x00682D80, "CRect* __thiscall func(CGxDevice* this)");
	apply_type(0x00682DC0, "int32_t __thiscall func(CGxDevice* this, int32_t a2)");
	apply_type(0x00682E20, "int32_t __thiscall func(CGxDevice* this, int32_t a2)");
	apply_type(0x00682E50, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00682F10, "void __thiscall func(CGxDevice* this, CGxBuf* buf)");
	apply_type(0x00682F40, "uint32_t __stdcall func(EGxPrim primType, uint32_t indexCount)");
	apply_type(0x00682F70, "void __thiscall func(CGxDevice* this, C3Vector* n)");
	apply_type(0x00682FA0, "void __thiscall func(CGxDevice* this, uint32_t tmu, C2Vector* t)");
	apply_type(0x00683080, "void __thiscall func(CGxDevice* this, uint32_t whichLight, int32_t enable)");
	apply_type(0x006830B0, "int32_t __thiscall func(CGxDevice* this, uint32_t app, uint32_t hw, uint32_t appDisables, uint32_t hwDisables, uint32_t flagPos, int32_t* enable)");
	apply_type(0x00683100, "int32_t __thiscall func(CGxDevice* this, EGxMasterEnables state)");
	apply_type(0x00683130, "int32_t __thiscall func(CGxDevice* this, CGxBuf* buf, void *data, uint32_t size, uint32_t offset)");
	apply_type(0x00683150, "uint8_t* __thiscall func(CGxDevice* this, CGxBuf* buf)");
	apply_type(0x00683180, "int32_t __thiscall func(CGxDevice* this, CGxBuf* buf, uint32_t size)");
	apply_type(0x006833A0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x006833E0, "void __thiscall func(CGxDevice* this, EGxShTarget target, uint32_t index, float* constants, uint32_t count)");
	apply_type(0x00683560, "uint8_t* __thiscall func(CGxDevice* this, EGxShTarget target)");
	apply_type(0x00683580, "void __thiscall func(CGxDevice* this, EGxShTarget target, uint32_t index, uint32_t count)");
	apply_type(0x006835E0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00683610, "void __stdcall func(EGxTexCommand command, uint32_t width, uint32_t height, uint32_t face, uint32_t level, void* userArg, uint32_t* texelStrideInBytes, void** texels)");
	apply_type(0x00683640, "void __thiscall func(CGxDevice* this, int32_t visible)");
	apply_type(0x00683650, "uint32_t* __thiscall func(CGxDevice* this)");
	apply_type(0x00683660, "void __thiscall func(CGxDevice* this, float depth)");
	apply_type(0x00683670, "void __stdcall func()");
	apply_type(0x006836D0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00683B90, "CGxMatrixStack* __thiscall func(CGxMatrixStack* this)");
	apply_type(0x00683CE0, "void __thiscall func(CGxDevice* this, CiRect* rect)");
	apply_type(0x00683D60, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683DB0, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683E00, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683E50, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683EA0, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683ED0, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683F00, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683F30, "void __stdcall func(CiRect* windowRect)");
	apply_type(0x00683FB0, "CGxLight* __thiscall func(CGxLight* this)");
	apply_type(0x00684070, "void __thiscall func(CGxGammaRamp* this, float gamma)");
	apply_type(0x006840F0, "int32_t __thiscall func(CGxDevice* this, CGxFormat* format)");
	apply_type(0x00684170, "void __thiscall func(CGxDevice* this, float gamma)");
	apply_type(0x00684190, "int32_t __thiscall func(CGxDevice* this, CGxGammaRamp* ramp)");
	apply_type(0x006841D0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00684260, "void __thiscall func(CGxDevice* this, uint32_t* w, uint32_t* h, CImVector** pixels)");
	apply_type(0x006842A0, "void __thiscall func(CGxDevice* this, EGxBuffer buffer, CGxTex* texture, uint32_t plane)");
	apply_type(0x00684360, "void __thiscall func(CGxDevice* this, CRect* rect)");
	apply_type(0x006843B0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x006843E0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00684410, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00684440, "void __thiscall func(CGxDevice* this, uint32_t a2, C4Plane* plane)");
	apply_type(0x00684590, "void __thiscall func(CGxDevice* this, CImVector* c)");
	apply_type(0x006845B0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00684620, "CGxApiLight* __thiscall func(CGxApiLight* this, CGxLight* light)");
	apply_type(0x006847D0, "void __thiscall func(CGxDevice* this, uint32_t a2, CGxLight* light, C3Vector* pos)");
	apply_type(0x00684850, "void __thiscall func(CGxDevice* this, EGxPoolTarget target, uint32_t itemSize, uint32_t itemCount)");
	apply_type(0x006848A0, "void __thiscall func(CGxDevice* this, CGxTex* texId, CiRect* updateRect, int32_t immediate)");
	apply_type(0x00684900, "void __thiscall func(CGxDevice* this, CGxTex* texId)");
	apply_type(0x00684970, "int32_t __thiscall func(CGxDevice* this, CGxShader** shaders, EGxShTarget target, char* a4, char* a5, int32_t permutations)");
	apply_type(0x00684AD0, "void __thiscall func(CGxDevice* this, CGxFormat* format)");
	apply_type(0x00684B50, "void __thiscall func(CGxDevice* this, uint32_t x, uint32_t y)");
	apply_type(0x00684BA0, "void __stdcall func(char* format, va_list args)");
	apply_type(0x00684C20, "void __stdcall func(char* format, ...)");
	apply_type(0x00684C40, "void __stdcall func(CGxCaps* caps)");
	apply_type(0x00684D10, "void __stdcall func(CGxFormat* format)");
	apply_type(0x00684D70, "int32_t __stdcall func(float aspectRatio, C2iVector* adjust, RECT* rect)");
	apply_type(0x00684FE0, "void __thiscall func(CGxDevice* this, EGxOverride override, uint32_t value)");
	apply_type(0x006853B0, "void __thiscall func(CGxDevice* this, DEVICERESTOREDCALLBACK fn)");
	apply_type(0x006853D0, "int32_t __thiscall func(CGxDevice* this, DEVICERESTOREDCALLBACK fn)");
	apply_type(0x00685460, "void __thiscall func(CGxDevice* this, TEXTURERECREATIONCALLBACK fn)");
	apply_type(0x00685480, "int32_t __thiscall func(CGxDevice* this, TEXTURERECREATIONCALLBACK fn)");
	apply_type(0x00685510, "void __thiscall func(CGxDevice* this, STEREOCHANGEDCALLBACK fn)");
	apply_type(0x00685530, "int32_t __thiscall func(CGxDevice* this, STEREOCHANGEDCALLBACK fn)");
	apply_type(0x006855C0, "void __thiscall func(CGxDevice* this, EGxPrim primType)");
	apply_type(0x00685640, "void __thiscall func(CGxDevice* this, C3Vector* v)");
	apply_type(0x00685970, "void __thiscall func(CGxDevice* this, EGxRenderState which)");
	apply_type(0x006859E0, "void __thiscall func(CGxDevice* this, EGxRenderState which)");
	apply_type(0x00685A70, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00685B50, "void __thiscall func(CGxDevice* this, int32_t force)");
	apply_type(0x00685C60, "void __thiscall func(CGxDevice* this, EGxTexTarget target, uint32_t width, uint32_t height, uint32_t depth, EGxTexFormat format, EGxTexFormat dataFormat, CGxTexFlags flags, void* userArg, void (*userFunc)(EGxTexCommand, uint32_t, uint32_t, uint32_t, uint32_t, void*, uint32_t*, void**), char* name, CGxTex** texId)");
	apply_type(0x00685E90, "void* __thiscall func(EmergencyMem* this, uint32_t a1)");
	apply_type(0x00685EB0, "void __thiscall func(CGxDevice* this, EGxMasterEnables state, int32_t enable)");
	apply_type(0x00685F50, "void __thiscall func(CGxDevice* this, EGxRenderState which, void* value)");
	apply_type(0x00685FB0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00686120, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00687660, "CGxBuf* __thiscall func(CGxDevice* this, CGxPool* pool, uint32_t itemSize, uint32_t itemCount, uint32_t index)");
	apply_type(0x006876D0, "CGxPool* __thiscall func(CGxDevice* this, EGxPoolTarget target, EGxPoolUsage usage, uint32_t size, EGxPoolHintBits hint, char* name)");
	apply_type(0x006877C0, "void __thiscall func(CGxDevice* this, CGxQuery** query, EGxQueryType queryType)");
	apply_type(0x00687820, "void __thiscall func(CGxDevice* this, CGxShader** shader)");
	apply_type(0x00687980, "void __thiscall func(CGxDevice* this, CGxTex* texId)");
	apply_type(0x006879F0, "void __thiscall func(CGxDevice* this, CGxQuery** query)");
	apply_type(0x00687A90, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00688230, "void __thiscall func(CGxPool* this)");
	apply_type(0x00688340, "void __thiscall func(CGxDevice* this, CGxPool* pool)");
	apply_type(0x00688690, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00689040, "void __thiscall func(CGxDevice* this, C44Matrix* matrix)");
	apply_type(0x00689050, "void __thiscall func(CGxDevice* this, C44Matrix* matrix)");
	apply_type(0x006890C0, "void __thiscall func(CGxDevice* this)");
	apply_type(0x00689690, "void __thiscall func(CGxDevice* this, uint8_t __flags)");
	apply_type(0x006897C0, "void __thiscall func(CGxDevice* this, CGxShader**, EGxShTarget, char*, char*, int32_t)");
	apply_type(0x00689B90, "__int16 __usercall func@<ax>(char* h@<eax>, int count)");
	apply_type(0x00689E80, "int32_t __stdcall func(void* a, void* b)");
	apply_type(0x00689EA0, "int32_t __stdcall func(PDISPLAY_DEVICEA device, uint32_t flag)");
	apply_type(0x00689EF0, "CGxDevice* __stdcall func()");
	apply_type(0x00689F20, "int32_t __stdcall func(CGxMonitorMode* mode)");
	apply_type(0x0068A090, "CGxMonitorMode* __thiscall func(TSGrowableArray_CGxMonitorMode* this)");
	apply_type(0x0068A0F0, "void __thiscall func(TSGrowableArray_CGxMonitorMode* this, uint32_t count)");
	apply_type(0x0068A4C0, "void __stdcall func(TSGrowableArray_CGxMonitorMode* modes)");
	apply_type(0x0068A9A0, "void __thiscall func(CGxDeviceOpenGl* this, CGxFormat* format)");
	apply_type(0x0068BBC0, "void __thiscall func(CGxDeviceOpenGl* this)");
	apply_type(0x0068BF20, "CGxDevice* __stdcall func()");
	apply_type(0x0068C220, "CGxDevice* __stdcall func()");
	apply_type(0x0068E140, "void __stdcall func(HINSTANCE* hInstance, LPDIRECT3D9* d3dLib)");
	apply_type(0x0068E180, "LPDIRECT3DINDEXBUFFER9 __thiscall func(CGxDeviceD3d* this, EGxPoolUsage usage, uint32_t size)");
	apply_type(0x0068E1F0, "void __thiscall func(CGxDeviceD3d* this, CGxPool* pool)");
	apply_type(0x0068E250, "void __thiscall func(CGxDeviceD3d* this, D3DPRESENT_PARAMETERS* d3dpp, CGxFormat* format)");
	apply_type(0x0068E450, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x0068E4A0, "void __thiscall func(CGxDeviceD3d* this, uint32_t level)");
	apply_type(0x0068E4C0, "void __thiscall func(CGxDeviceD3d* this, float gamma)");
	apply_type(0x0068E570, "void __thiscall func(CGxDeviceD3d* this, char* buffer, uint32_t size)");
	apply_type(0x0068E720, "void __thiscall func(CGxDeviceD3d* this, CGxPool* this)");
	apply_type(0x0068E750, "void __thiscall func(CGxDeviceD3d* this, int32_t visible)");
	apply_type(0x0068E7E0, "void __thiscall func(CGxDeviceD3d* this, uint32_t x, uint32_t y)");
	apply_type(0x0068E810, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x0068E900, "void __thiscall func(CGxDeviceD3d* this, CGxFormat* format)");
	apply_type(0x0068E980, "void __thiscall func(CGxDeviceD3d* this, float c)");
	apply_type(0x0068E9A0, "void __thiscall func(CGxDeviceD3d* this, float s)");
	apply_type(0x0068E9C0, "void __thiscall func(CGxDeviceD3d* this, CGxQuery** query, EGxQueryType queryType)");
	apply_type(0x0068EA10, "bool __thiscall func(CGxDeviceD3d* this, CGxQuery* query)");
	apply_type(0x0068EA90, "bool __thiscall func(CGxDeviceD3d* this, CGxQuery* query, EGxQueryParam param, uint32_t* data)");
	apply_type(0x0068EB20, "uint16_t __stdcall func()");
	apply_type(0x0068EBB0, "int32_t __thiscall func(CGxDeviceD3d* this, CGxFormat* format)");
	apply_type(0x0068ED80, "int32_t __stdcall func(HINSTANCE* hInstance, LPDIRECT3D9* d3dLib)");
	apply_type(0x0068EE20, "void __thiscall func(CGxDeviceD3d* this, CGxFormat* format)");
	apply_type(0x0068F3D0, "int32_t __thiscall func(CGxDeviceD3d* this, CGxFormat* format)");
	apply_type(0x0068F6A0, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x0068F770, "void __thiscall func(CGxDeviceD3d* this, EGxBuffer buffer, CGxTex* texture, uint32_t plane)");
	apply_type(0x0068F900, "void __thiscall func(CGxDeviceD3d* this, CGxTex* texId)");
	apply_type(0x0068F950, "void __thiscall func(CGxDeviceD3d* this, CGxTex* sourceTex, uint32_t sourcePlane, CGxTex* destTex, uint32_t destPlane)");
	apply_type(0x0068FA60, "int32_t __thiscall func(CGxDeviceD3d* this, CGxBuf* buf)");
	apply_type(0x0068FAE0, "int32_t __thiscall func(CGxDeviceD3d* this, CGxBuf* buf, uint32_t size)");
	apply_type(0x0068FB10, "uint8_t* __thiscall func(CGxDeviceD3d* this, CGxBuf* buf)");
	apply_type(0x0068FCE0, "char* __thiscall func(CGxDeviceD3d* this, CGxBuf* buf)");
	apply_type(0x0068FD00, "void __thiscall func(CGxDeviceD3d* this, CGxBuf* buf, const void* data, uint32_t size, uint32_t offset)");
	apply_type(0x0068FD50, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x0068FE80, "void __thiscall func(CGxDeviceD3d* this, uint8_t __flags)");
	apply_type(0x0068FED0, "void __thiscall func(CGxDeviceD3d* this, CiRect* rect, TSGrowableArray_CImVector* pixels)");
	apply_type(0x00690150, "void __thiscall func(CGxDeviceD3d* this, int32_t freeTextures)");
	apply_type(0x00690230, "void __thiscall func(CGxDeviceD3d* this, EGxWM wm, int32_t param1, int32_t param2)");
	apply_type(0x006904D0, "int32_t __thiscall func(CGxDeviceD3d* this, CGxFormat* format)");
	apply_type(0x006905F0, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x00690680, "int32_t __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x00690750, "int32_t __thiscall func(CGxDeviceD3d* this, int32_t (*windowProc)(void*, uint32_t, uintptr_t, intptr_t), CGxFormat* format)");
	apply_type(0x00690830, "int32_t __thiscall func(CGxDeviceD3d* this, void* hwnd, CGxFormat* format)");
	apply_type(0x0069FAA0, "int32_t __thiscall func(CGxDeviceD3d* this, D3DFORMAT format)");
	apply_type(0x0069FB00, "LPDIRECT3DVERTEXBUFFER9 __thiscall func(EGxPoolUsage usage, uint32_t size)");
	apply_type(0x0069FB70, "int32_t __thiscall func(CGxDeviceD3d* this, CGxPool* pool)");
	apply_type(0x0069FE10, "void __thiscall func(CGxDeviceD3d* this, int32_t focus)");
	apply_type(0x0069FE80, "void __thiscall func(CGxDeviceD3d* this, CGxGammaRamp* ramp)");
	apply_type(0x0069FED0, "void* __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x0069FF40, "void __thiscall func(CGxDeviceD3d* this, EGxOverride override, uint32_t value)");
	apply_type(0x0069FF80, "void __thiscall func(CGxDeviceD3d* this, CGxPool* pool, uint32_t size)");
	apply_type(0x006A00C0, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A0110, "float __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A0120, "float __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A0130, "bool __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A0190, "bool __thiscall func(CGxDeviceD3d* this, CGxQuery** query)");
	apply_type(0x006A0240, "bool __thiscall func(CGxDeviceD3d* this, CGxQuery* query)");
	apply_type(0x006A0310, "bool __thiscall func(CGxDeviceD3d* this, CGxQuery* query, uint32_t* data)");
	apply_type(0x006A0360, "LRESULT __stdcall func(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)");
	apply_type(0x006A1690, "void __thiscall func(CGxDeviceD3d* this, int32_t freeQueries)");
	apply_type(0x006A1950, "void __thiscall func(CGxDeviceD3d* this, CiRect* rect, TSGrowableArray_float* depths)");
	apply_type(0x006A1C60, "void __thiscall func(CGxDeviceD3d* this, int32_t freePools)");
	apply_type(0x006A2BB0, "void __thiscall func(CGxDeviceD3d* this, CGxTex* texId)");
	apply_type(0x006A2C00, "void __thiscall func(CGxDeviceD3d* this, CGxTex* texId)");
	apply_type(0x006A2D80, "void __thiscall func(CGxDeviceD3d* this, CGxTex* texId)");
	apply_type(0x006A3070, "void __thiscall func(CGxDeviceD3d* this, CGxTex* texId)");
	apply_type(0x006A30D0, "int32_t __thiscall func(CGxDeviceD3d* this, CGxTex* destTex, CGxTex* sourceTex, C2iVector* pos, C2iVector* size, uint32_t level, uint32_t plane)");
	apply_type(0x006A31E0, "void __thiscall func(CGxDeviceD3d* this, CGxTex* a1, CGxTex* a2, CiRect* a3, CiRect* a4, uint32_t a5, uint32_t a6)");
	apply_type(0x006A3350, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A3420, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A3450, "void __thiscall func(CGxDeviceD3d* this, uint32_t mask)");
	apply_type(0x006A3620, "void __thiscall func(CGxDeviceD3d* this, CGxBatch* batch)");
	apply_type(0x006A3720, "bool __thiscall func(CGxDeviceD3d__GxVertexDecl* this, D3DVERTEXELEMENT9* elements, uint32_t count)");
	apply_type(0x006A3810, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A3870, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A38D0, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A39E0, "void __thiscall func(CGxDeviceD3d* this, uint32_t stream, LPDIRECT3DVERTEXBUFFER9 buffer, uint32_t offset, uint32_t stride)");
	apply_type(0x006A3A60, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A3C40, "void __thiscall func(CGxDeviceD3d* this, CGxDeviceD3d__EDeviceState state, uint32_t val)");
	apply_type(0x006A4100, "void __thiscall func(CGxDeviceD3d* this, uint32_t tmu, EGxTexGen texGen, uint32_t index)");
	apply_type(0x006A4190, "void __thiscall func(CGxDeviceD3d* this, uint32_t tmu, uint32_t op)");
	apply_type(0x006A41F0, "void __thiscall func(CGxDeviceD3d* this, uint32_t tmu, uint32_t op)");
	apply_type(0x006A4250, "void __thiscall func(CGxDeviceD3d* this, CImVector diffuse, CImVector emissive, CImVector specular, float specularExp)");
	apply_type(0x006A43A0, "C44Matrix* __thiscall func(C44Matrix *this, C44Matrix* __return_ptr result)");
	apply_type(0x006A43D0, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A4700, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A4850, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A4900, "void __thiscall func(CGxDeviceD3d* this, uint32_t tmu, CGxTex* texId)");
	apply_type(0x006A4AC0, "void __thiscall func(CGxDeviceD3d* this, uint32_t tmu, uint32_t index)");
	apply_type(0x006A4AF0, "void __thiscall func(CGxDeviceD3d* this, uint32_t tmu, EGxTexGen texGen)");
	apply_type(0x006A4C30, "void __thiscall func(CGxDeviceD3d* this, EGxRenderState rs)");
	apply_type(0x006A5540, "LPDIRECT3DVERTEXDECLARATION9 __thiscall func(CGxDeviceD3d* this, D3DVERTEXELEMENT9* elements, uint32_t count)");
	apply_type(0x006A5680, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A5700, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A5940, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A5A00, "void __thiscall func(CGxDeviceD3d* this, CRect* dst)");
	apply_type(0x006A5A30, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A5AA0, "void __thiscall func(CGxDeviceD3d* this, uint32_t tmu)");
	apply_type(0x006A5C70, "void __thiscall func(CGxDeviceD3d* this, CGxShader* ps)");
	apply_type(0x006A5D50, "void __thiscall func(CGxDeviceD3d* this, CGxShader* shader, const char* a2, const char* a3)");
	apply_type(0x006A5E10, "void __thiscall func(CGxDeviceD3d* this, CGxShader* shader)");
	apply_type(0x006A5E40, "void __thiscall func(CGxDeviceD3d* this, int32_t freeShaders)");
	apply_type(0x006A5EF0, "void __thiscall func(CGxDevice* this, CGxTex* texId, uint32_t* width, uint32_t* height, uint32_t* baseMip, uint32_t* mipCount)");
	apply_type(0x006A74B0, "void __thiscall func(CGxDeviceD3d* this, uint32_t mask, CImVector color)");
	apply_type(0x006A7940, "void __thiscall func(CGxDeviceD3d* this, uint32_t width, uint32_t height)");
	apply_type(0x006A9920, "void __thiscall func(CGxDeviceD3d* this, CRect* dst)");
	apply_type(0x006A99E0, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006A9B40, "void __thiscall func(CGxDeviceD3d* this, C44Matrix* matrix)");
	apply_type(0x006A9E00, "void __thiscall func(CGxDeviceD3d* this, C44Matrix* matrix)");
	apply_type(0x006A9FE0, "void __thiscall func(CGxDeviceD3d* this)");
	apply_type(0x006AA070, "void __thiscall func(CGxDeviceD3d* this, CGxShader* shader)");
	apply_type(0x006AA0D0, "void __thiscall func(CGxDeviceD3d* this, CGxShader* shader)");
	apply_type(0x006AA130, "void __thiscall func(CGxDeviceD3d* this, CGxShader** shaders, EGxShTarget target, char* a3, char* a4, int32_t permutations)");
	apply_type(0x006AA190, "void __thiscall func(CGxDeviceD3d* this, CGxShader** shader)");
	apply_type(0x006AA2F0, "void __thiscall func(CGxDeviceD3d* this, CGxShader* vs)");
	apply_type(0x006AA3B0, "int32_t __thiscall func(CTgaFile* this)");
	apply_type(0x006AA3E0, "uint32_t __thiscall func(CTgaFile* this)");
	apply_type(0x006AA420, "void __thiscall func(CTgaFile* this, uint8_t* pAlphaData, uint8_t* pNoAlphaData, uint8_t* alpha)");
	apply_type(0x006AA630, "int32_t __thiscall func(CTgaFile* this, uint8_t* pRLEData, uint8_t* pData)");
	apply_type(0x006AA700, "void __thiscall func(CTgaFile* this, int32_t set)");
	apply_type(0x006AA840, "TGA32Pixel* __thiscall func(CTgaFile* this)");
	apply_type(0x006AA870, "int32_t __thiscall func(CTgaFile* this)");
	apply_type(0x006AAF40, "int32_t __thiscall func(CTgaFile* this)");
	apply_type(0x006AAFB0, "int32_t __thiscall func(CTgaFile* this, char* filename, int32_t a3)");
	apply_type(0x006AB390, "int32_t __thiscall func(CTgaFile* this, void* pImg)");
	apply_type(0x006AB4B0, "int32_t __thiscall func(CTgaFile* this, int32_t flags)");
	apply_type(0x006AB620, "uint32_t __cdecl func(uint32_t level, uint32_t width, uint32_t height, uint32_t fourCC)");
	apply_type(0x006AB700, "uint32_t __stdcall func(uint32_t width, uint32_t height)");
	apply_type(0x006AB760, "MipBits* __stdcall func(uint32_t fourCC, uint32_t width, uint32_t height, char* filename, int32_t linenumber)");
	apply_type(0x006AB810, "void __stdcall func(uint32_t fourCC, uint32_t width, uint32_t height, MipBits* bits)");
	apply_type(0x006AB860, "void _stdcall func(C4Pixel* dest, uint32_t destWidth, uint32_t destHeight, C4Pixel* source, uint32_t sourceWidth, uint32_t sourceHeight)");
	apply_type(0x006ABE00, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ABE30, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ABE60, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ABE90, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ABF40, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ABFC0, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AC030, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AC0B0, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ACCE0, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ACCF0, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006ACD70, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE440, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE4A0, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE500, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE560, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE5C0, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE620, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE680, "void __stdcall func(C2iVector* size, void* in, uint32_t inStride, void* out, uint32_t outStride)");
	apply_type(0x006AE7C0, "int32_t __stdcall func(C2iVector* size, BlitAlpha alpha, void* src, uint32_t srcStride, BlitFormat srcFmt, void* dst, uint32_t dstStride, BlitFormat dstFmt)");
	apply_type(0x006AE8B0, "void __thiscall func(CBLPFile* this)");
	apply_type(0x006AE900, "int32_t __thiscall func(CBLPFile* this, void* fileBits)");
	apply_type(0x006AE990, "void __thiscall func(CBLPFile* this, uint8_t* data, void* tempbuffer, uint32_t colorSize)");
	apply_type(0x006AE9E0, "void __thiscall func(CBLPFile* this, uint8_t* data, void* tempbuffer, uint32_t colorSize)");
	apply_type(0x006AEBA0, "void __thiscall func(CBLPFile* this, uint8_t* data, void* tempbuffer, uint32_t width, uint32_t height)");
	apply_type(0x006AEE70, "void __thiscall func(CBLPFile* this, uint8_t* data, void* tempbuffer, uint32_t width, uint32_t height)");
	apply_type(0x006AF140, "void __thiscall func(CBLPFile* this, uint8_t* data, void* tempbuffer, uint32_t width, uint32_t height)");
	apply_type(0x006AF340, "void __thiscall func(CBLPFile* this, uint8_t* data, void* tempbuffer, uint32_t width, uint32_t height)");
	apply_type(0x006AF6A0, "uint32_t __thiscall func(CBLPFile* this, uint32_t mipLevel)");
	apply_type(0x006AF730, "int32_t __thiscall func(CBLPFile *this, PIXEL_FORMAT format, uint32_t mipLevel, uint32_t* size, uint32_t* stride)");
	apply_type(0x006AF810, "int32_t __thiscall func(CBLPFile* this, PIXEL_FORMAT format, uint32_t mipLevel, uint8_t* data, void* tempBuffer)");
	apply_type(0x006AFCE0, "int32_t __thiscall func(CBLPFile* this, char* fileName, PIXEL_FORMAT format, uint32_t mipLevel, unsigned char* data, uint32_t* stride)");
	apply_type(0x006AFF10, "int32_t __thiscall func(CBLPFile* this, char* filename)");
	apply_type(0x006AFFD0, "int32_t __thiscall func(CBLPFile* this, char* fileName, PIXEL_FORMAT format, MipBits** images, uint32_t mipLevel, int32_t a6)");
	apply_type(0x006BF4C0, "void __stdcall func(float minX, float maxX, float minY, float maxY, float minZ, float maxZ, C44Matrix* dst)");
	apply_type(0x00763680, "void __stdcall func(CONSOLELINE* node)");
	apply_type(0x00763730, "void __stdcall func(char* text)");
	apply_type(0x007637D0, "void __fastcall func(CONSOLELINE* lineptr, uint32_t chars)");
	apply_type(0x00763830, "void __stdcall func()");
	apply_type(0x00763860, "void __stdcall func()");
	apply_type(0x007639A0, "int32_t __stdcall func(EVENT_DATA_MOUSE* data, void* param)");
	apply_type(0x007639D0, "int32_t __stdcall func(EVENT_DATA_MOUSE* data, void* param)");
	apply_type(0x00763A60, "void __stdcall func(CONSOLELINE* lineptr@<eax>, char* command)");
	apply_type(0x00763AB0, "void __thiscall func(CONSOLELINE* this)");
	apply_type(0x00763B10, "void __thiscall func(CONSOLELINE* this)");
	apply_type(0x00763B40, "void __thiscall func(CONSOLELINE* this)");
	apply_type(0x00763B90, "void __thiscall func(CONSOLELINE* this)");
	apply_type(0x00763BE0, "int32_t __stdcall func(EVENT_DATA_KEY* data, void* param)");
	apply_type(0x00763C50, "void __stdcall func()");
	apply_type(0x00763D60, "int32_t __stdcall func(void* param)");
	apply_type(0x00763DF0, "void __stdcall func()");
	apply_type(0x00764040, "void __stdcall func()");
	apply_type(0x007641A0, "void ___stdcall func(C3Vector* caretpos)");
	apply_type(0x007643F0, "void __stdcall func()");
	apply_type(0x00764520, "CONSOLELINE* __stdcall func()");
	apply_type(0x007645E0, "void __stdcall func(void* param, RECTF* rect, RECTF* visible, float elapsedSec)");
	apply_type(0x00764790, "CONSOLELINE* __stdcall func(float y)");
	apply_type(0x00764800, "void __stdcall func(char* characters)");
	apply_type(0x00764990, "int32_t __stdcall func(EVENT_DATA_CHAR* data, void* param)");
	apply_type(0x00764A10, "int32_t __stdcall func(EVENT_DATA_MOUSE* data, void* param)");
	apply_type(0x00764B90, "int32_t __stdcall func(EVENT_DATA_KEY* data, void* param)");
	apply_type(0x00765270, "void __stdcall func(char* str, COLOR_T color)");
	apply_type(0x00765360, "void __stdcall func(char* format, COLOR_T color, ...)");
	apply_type(0x007653B0, "void __stdcall func(char* str,...)");
	apply_type(0x007658A0, "void __stdcall func(char* commandLine, int32_t addToHistory)");
	apply_type(0x007659C0, "int32_t __stdcall func(EVENT_DATA_IDLE* data,void* param)");
	apply_type(0x00765AF0, "int32_t __stdcall func(EVENT_DATA_KEY* data, void* param)");
	apply_type(0x00765FF0, "void __stdcall func()");
	apply_type(0x00766140, "void __stdcall func()");
	apply_type(0x00766400, "int32_t __stdcall func(HOSFILE file)");
	apply_type(0x00766530, "int32_t __stdcall func(char* filename)");
	apply_type(0x00766640, "bool __stdcall func(char* name, char* value, void* param)");
	apply_type(0x007668C0, "bool __thiscall func(CVar* this, char* value, bool setValue, bool setReset, bool setDefault, bool a6)");
	apply_type(0x00766A20, "bool __thiscall func(CVar* this)");
	apply_type(0x00766AB0, "bool __thiscall func(CVar* this)");
	apply_type(0x00767030, "int32_t __stdcall func(uint32_t a1, uint32_t a2, void* callback, void* param)");
	apply_type(0x00767100, "void __stdcall func()");
	apply_type(0x007673F0, "void __stdcall func()");
	apply_type(0x00767FC0, "CVar* __stdcall func(char* name, char* help, uint32_t flags, const char* value, void* fcn, uint32_t category, bool a7, void* arg, bool a9)");
	apply_type(0x00768340, "void __stdcall func(char* filename)");
	apply_type(0x00768410, "int32_t __stdcall func(char* command, char* arguments)");
	apply_type(0x00768440, "char* __stdcall func(uint32_t index)");
	apply_type(0x007689E0, "void __stdcall func(char* command)");
	apply_type(0x00768A20, "int32_t __stdcall func(char* partial, char** previous, int32_t direction)");
	apply_type(0x00769100, "int32_t __stdcall func(char* command, COMMANDHANDLER handler, CATEGORY category, char* helpText)");
	apply_type(0x00769230, "int32_t __stdcall func()");
	apply_type(0x00769240, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x007692D0, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769360, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x007693B0, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769520, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769550, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769580, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x007695B0, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x007695E0, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769610, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769650, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x007696A0, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x007696D0, "void __stdcall func(char* list)");
	apply_type(0x00769810, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769830, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769860, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769890, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769950, "void __stdcall func(CGxFormat* format)");
	apply_type(0x00769C00, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769C30, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769C60, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x00769D00, "Hardware* __stdcall func()");
	apply_type(0x0076A220, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x0076A580, "bool __stdcall func(CVar* h, char* oldValue, char* newValue, void* arg)");
	apply_type(0x0076AB80, "int32_t __stdcall func(char* title, int32_t multithreaded)");
	apply_type(0x0076B3F0, "void __stdcall func(DefaultSettings* defaults, Hardware* hardware)");
	apply_type(0x0076B520, "void __stdcall func(DefaultSettings* defaults, Hardware* hardware)");
	apply_type(0x0076B540, "void __stdcall func(Hardware* hardware@<edi>)");
	apply_type(0x0076B5A0, "void __usercall __noreturn func(int32_t messageID, const char* fallbackMessage)");
	apply_type(0x0076BA30, "void __stdcall func(Hardware* hardware, bool* hwChanged)");
	apply_type(0x0076E4A0, "void __stdcall func(uint32_t flags, uint8_t changeMask)");
	apply_type(0x0076E540, "void* __stdcall func(uint32_t bytes, char* filename, int32_t linenumber, uint32_t flags)");
	apply_type(0x0076E5A0, "int32_t __stdcall func(void* ptr, char* filename, int32_t linenumber, uint32_t flags)");
	apply_type(0x0076E5E0, "void* __stdcall func(void* ptr, uint32_t bytes, char* filename, int32_t linenumber, uint32_t flags)");
	apply_type(0x0076EE30, "int32_t __stdcall func(char* str)");
	apply_type(0x0076F070, "int32_t __stdcall func(char* dest, size_t maxchars, char* format, ...)");
	apply_type(0x007703A0, "int32_t __usercall func@<eax>(void* parentKey, char* subKeyName@<eax>, char* valuename, uint32_t* datatype, uint8_t* buffer@<ebx>, uint32_t bytes@<edi>, uint32_t* bytesread@<ecx>)");
	apply_type(0x00770490, "int32_t __usercall func@<eax>(char* keyname, char* valuename, uint32_t flags, uint32_t* datatype, void* buffer, uint32_t bytes, uint32_t* bytesread@<esi>)");
	apply_type(0x00770580, "int32_t __usercall func@<eax>(char* keyname, char* valuename, uint32_t flags@<ebx>, uint32_t datatype, const void* buffer, uint32_t bytes@<edi>)");
	apply_type(0x00770840, "int32_t __stdcall func(char* keyname, char* valuename, uint32_t flags, uint32_t* value)");
	apply_type(0x007709A0, "int32_t __stdcall func(char* keyname, char* valuename, uint32_t flags, char* string)");
	apply_type(0x00773590, "int32_t __stdcall func(ARGLIST* listptr, uint32_t numargs)");
	apply_type(0x00773890, "int32_t __stdcall func(char* cmdline, int32_t skipprogname, CMDEXTRACALLBACK extracallback, CMDERRORCALLBACK errorcallback)");
	apply_type(0x00773990, "int32_t __stdcall func(CMDEXTRACALLBACK extracallback, CMDERRORCALLBACK errorcallback)");
	apply_type(0x00773A80, "int32_t __stdcall func(int optname, void* optval, uint32_t optlen)");
	apply_type(0x00774620, "SCritSect* __thiscall func(SCritSect* this)");
	apply_type(0x00774630, "void __thiscall func(SCritSect *this)");
	apply_type(0x00774640, "void __thiscall func(SCritSect *this)");
	apply_type(0x00774650, "void __thiscall func(SCritSect *this)");
	apply_type(0x00775630, "int32_t __usercall func@<eax>(char* path@<eax>)");
	apply_type(0x007757E0, "int32_t __stdcall func(char* filename, uint32_t flags, HSLOG* log)");
	apply_type(0x00777420, "void __stdcall func(HSRGN handle, RECTF* rect, void* param, int32_t combinemode)");
	apply_type(0x00777590, "void __stdcall func(HSRGN handle, RECTF* rect)");
	apply_type(0x00777940, "void __stdcall func(HSRGN handle)");
	apply_type(0x00777980, "void __stdcall func(HSRGN* handlePtr, uint32_t reserved)");
	apply_type(0x0077AC80, "void __thiscall func(TSFixedArray_uint32_t* this, uint32_t count, uint32_t* data)");
	apply_type(0x0077ACF0, "uint32_t __thiscall func(BigBuffer* this, uint32_t index)");
	apply_type(0x0077AD10, "int32_t __fastcall func(BigBuffer* a, BigBuffer* b)");
	apply_type(0x0077ADD0, "uint32_t __stdcall func(BigBuffer* a)");
	apply_type(0x0077AE60, "int32_t __stdcall func(BigData* b, BigData* c)");
	apply_type(0x0077AE80, "void __thiscall func(BigStack* this)");
	apply_type(0x0077AEC0, "uint32_t* __thiscall func(BigBuffer* this, uint32_t index)");
	apply_type(0x0077AF30, "void __thiscall func(BigBuffer* this, uint32_t count)");
	apply_type(0x0077AF80, "void __thiscall func(BigBuffer* this)");
	apply_type(0x0077AFF0, "void __thiscall func(BigBuffer* this)");
	apply_type(0x0077B020, "void __stdcall func(BigBuffer* a, BigBuffer* b, BigBuffer* c@<esi>)");
	apply_type(0x0077B160, "void __stdcall func(BigBuffer* a, uint32_t* b, BigBuffer* c, uint64_t d)");
	apply_type(0x0077B2B0, "void __stdcall func(BigBuffer* a, BigBuffer* b, uint64_t c)");
	apply_type(0x0077B3E0, "void __stdcall func(BigBuffer* a, BigBuffer* b, BigBuffer* c)");
	apply_type(0x0077B530, "void __stdcall func(BigBuffer@<edi>* a)");
	apply_type(0x0077B590, "void __stdcall func(BigBuffer* a, BigBuffer* b, uint32_t shift)");
	apply_type(0x0077B700, "void __stdcall func(BigBuffer* a, BigBuffer* b, uint32_t shift)");
	apply_type(0x0077B7F0, "void __stdcall func(BigBuffer* buffer@<edi>, void* data, uint32_t bytes)");
	apply_type(0x0077B8B0, "void __stdcall func(BigBuffer* buffer@<edi>, uint32_t value)");
	apply_type(0x0077B910, "void __stdcall func(TSGrowableArray_uint8_t* output, BigBuffer* buffer)");
	apply_type(0x0077B9E0, "void __stdcall func(BigData* a, BigData* b, BigData* c)");
	apply_type(0x0077BA00, "void __stdcall func(BigData* a, uint32_t* bits)");
	apply_type(0x0077BA60, "void __stdcall func(BigData* num, void* data, uint32_t bytes)");
	apply_type(0x0077BA80, "void __stdcall func(BigData* num, uint32_t val)");
	apply_type(0x0077BAA0, "void __stdcall func(BigData* a, BigData* b, BigData* c)");
	apply_type(0x0077BAC0, "void __stdcall func(BigBuffer* a, BigBuffer* b, BigBuffer* c, BigBuffer* d, BigStack* stack)");
	apply_type(0x0077BEE0, "void __stdcall func(BigData* a, BigData* b, BigData* c)");
	apply_type(0x0077BF20, "void __stdcall func(BigData** num)");
	apply_type(0x0077BF90, "void __stdcall func(BigData* num, uint8_t* data, uint32_t maxBytes, uint32_t* bytes)");
	apply_type(0x0077BFF0, "void __stdcall func(BigBuffer* a, BigBuffer* b, BigBuffer* c, BigStack* stack)");
	apply_type(0x0077C330, "void __stdcall func(BigBuffer* a, BigBuffer* b, BigStack* stack)");
	apply_type(0x0077C6A0, "void __stdcall func(BigData* num)");
	apply_type(0x0077C700, "void __stdcall func(BigData* a, BigData* b, BigData* c)");
	apply_type(0x0077C720, "void __stdcall func(BigBuffer* a, BigBuffer* b, BigBuffer* c, BigBuffer* d, BigStack* stack)");
	apply_type(0x0077C980, "void __stdcall func(BigData* a, BigData* b, BigData* c, BigData* d)");
	apply_type(0x00818070, "void __stdcall func(lua_State* L, int startIndex, char* buffer, uint32_t bufferSize)");
	apply_type(0x00819830, "void __thiscall func(FrameScript_Object* this)");
	apply_type(0x00819EA0, "void __stdcall func(int32_t function, FrameScript_Object* object, int32_t args, char* args_fmt, FrameScript_EventObject* eventObject)");
	apply_type(0x0086AB30, "TimingMethod __thiscall func(OsTimeManager* this)");
	apply_type(0x0086AD70, "char* __stdcall func(TimingMethod method)");
	apply_type(0x0086ADC0, "uint64_t __thiscall func(OsTimeManager* this)");
	apply_type(0x0086AEA0, "OsTimeManager* __thiscall func(OsTimeManager* this, int32_t a2)");
	apply_type(0x0086BBA0, "uint64_t __stdcall func()");
	apply_type(0x0086C6E0, "int32_t __stdcall func(void* parentWindow, int32_t style, const char* message, const char* title)");
	apply_type(0x0086D430, "void __stdcall func(TimingMethod timingMethod)");
	apply_type(0x008714E0, "char* __stdcall func()");
	apply_type(0x00871510, "void __stdcall func(char* str)");
	apply_type(0x008A0A54, "NvAPI_Status __stdcall func(int32_t nr, char* szDesc)");
	apply_type(0x008A0F88, "NvAPI_Status __stdcall func(NV_StereoRegistryProfileType registryProfileType)");
	apply_type(0x008A0FA0, "NvAPI_Status __stdcall func()");
	apply_type(0x008A0FA6, "NvAPI_Status __stdcall func()");
	apply_type(0x008A0FAC, "NvAPI_Status __stdcall func(uint8_t* pIsStereoEnabled)");
	apply_type(0x008A0FB2, "NvAPI_Status __stdcall func(IUnknown* pDevice, StereoHandle* pStereoHandle)");
	apply_type(0x008A0FB8, "NvAPI_Status __stdcall func(StereoHandle stereoHandle)");
	apply_type(0x008A0FD6, "NvAPI_Status __stdcall func(StereoHandle stereoHandle, float newSeparationPercentage)");
	apply_type(0x008A0FEE, "NvAPI_Status __stdcall func(StereoHandle stereoHandle, float newConvergence)");
	apply_type(0x008C8DE0, "int32_t __stdcall func()");
	apply_type(0x0095BFB0, "int32_t __stdcall func()");
	apply_type(0x0095F3A0, "void __thiscall func(CSimpleModel* this)");
	apply_type(0x0095F420, "FrameScript_Object__ScriptIx* __thiscall func(CSimpleModel* this, char* name, FrameScript_Object__ScriptData* data)");
	apply_type(0x0095F4D0, "void __stdcall func(CM2Model* model, void* arg)");
	apply_type(0x0095F4F0, "void __thiscall func(CSimpleModel* this, HCAMERA camera)");
	apply_type(0x0095F540, "void __thiscall func(CSimpleModel* this, uint32_t id)");
	apply_type(0x0095F5C0, "void __thiscall func(CSimpleModel* this, CM2Light* light)");
	apply_type(0x0095F5E0, "void __thiscall func(CSimpleModel* this, uint32_t sequence)");
	apply_type(0x0095F610, "int32_t __thiscall func(CSimpleModel* this, uint32_t sequence, int32_t time)");
	apply_type(0x0095F680, "void __thiscall func(CSimpleModel* this)");
	apply_type(0x0095F7D0, "void __thiscall func(CSimpleModel* this, uint32_t __flags)");
	apply_type(0x0095F800, "void __thiscall func(CSimpleModel* this, XMLNode* node, CStatus* status)");
	apply_type(0x0095F990, "void __thiscall func(CSimpleModel* this, char* sourcefile)");
	apply_type(0x0095F9F0, "void __thiscall func(CSimpleModel* this, uint32_t index)");
	apply_type(0x0095FBA0, "void __thiscall func(CSimpleModel* this)");
	apply_type(0x0095FC30, "void __stdcall func(void* arg)");
	apply_type(0x00960070, "void __stdcall func(CM2Model* model, CM2Lighting* lighting, void* userArg)");
	apply_type(0x009600E0, "void __thiscall func(CSimpleModel* this, CM2Model* model)");
	apply_type(0x00960190, "void __thiscall func(CSimpleModel* this, CM2Model* model)");
	apply_type(0x00960280, "void __thiscall func(CSimpleModel* this, float elapsedSec)");
	apply_type(0x009603D0, "void __stdcall func(lua_State* L)");
	apply_type(0x00960530, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009605D0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00960620, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00960660, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009606E0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00960760, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009607E0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009608B0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00960970, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00960A10, "int32_t __stdcall func(lua_State* L, int32_t a2, CM2Light* light)");
	apply_type(0x00960D20, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00960DD0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00960FC0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00961040, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00961090, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009610E0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00961120, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009611A0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00961200, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009612D0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00961350, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009613A0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00961420, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x00961470, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009614B0, "int32_t __stdcall func(lua_State* L)");
	apply_type(0x009AD000, "void __thiscall func(DayNight__DNGlare* this, char* a1)");
	apply_type(0x009E0E24, "CDataStore__v_table");
	apply_type(0x009E1BE0, "ARGLIST[17]");
	apply_type(0x009E537C, "uint32_t[7]");
	apply_type(0x009E5398, "uint8_t[256]");
	apply_type(0x009E5630, "Blizzard__File__FileInfo");
	apply_type(0x009E9EC8, "uint32_t[7]");
	apply_type(0x009EA04C, "TInstanceId_EvtContext__v_table");
	apply_type(0x00A2DAF8, "uint32_t[13]");
	apply_type(0x00A2DB60, "uint32_t[13]");
	apply_type(0x00A2DDC0, "CGxDevice__v_table");
	apply_type(0x00A2E198, "CGxDevice__v_table");
	apply_type(0x00A2E4A8, "D3DFORMAT[8]");
	apply_type(0x00A2E4C8, "uint32_t[7]");
	apply_type(0x00A2E718, "CGxDevice__v_table");
	apply_type(0x00A2F7E8, "EGxTexFormat[13]");
	apply_type(0x00A2F81C, "D3DFORMAT[13]");
	apply_type(0x00A2F850, "D3DCUBEMAP_FACES[6]");
	apply_type(0x00A2F8D4, "D3DPRIMITIVETYPE[6]");
	apply_type(0x00A2F8EC, "D3DDECLUSAGE[14]");
	apply_type(0x00A2F924, "uint32_t[14]");
	apply_type(0x00A2F964, "D3DBLEND[12]");
	apply_type(0x00A2F994, "D3DBLEND[12]");
	apply_type(0x00A2F9C4, "D3DTEXTUREADDRESS[2]");
	apply_type(0x00A2F9CC, "int32_t[6]");
	apply_type(0x00A2F9E4, "int32_t[6][2]");
	apply_type(0x00A2FA14, "D3DCMPFUNC[4]");
	apply_type(0x00A2FA24, "D3DCULL[3]");
	apply_type(0x00AB6350, "WowClientDB_Startup_StringsRec");
	apply_type(0x00AB90AC, "Blizzard__File__Filesystem*");
	apply_type(0x00AB91C0, "Blizzard__File__Filesystem");
	apply_type(0x00AB92C0, "Blizzard__File__Filesystem");
	apply_type(0x00AC0DC0, "int32_t");
	apply_type(0x00AC0DC4, "TSList_EvtThread");
	apply_type(0x00AC1B9C, "TSExplicitList_CILayer");
	apply_type(0x00AD2808, "char*[53]");
	apply_type(0x00AD305C, "WowClientDB_AchievementRec");
	apply_type(0x00AD3080, "WowClientDB_Achievement_CriteriaRec");
	apply_type(0x00AD30A4, "WowClientDB_Achievement_CategoryRec");
	apply_type(0x00AD30C8, "WowClientDB_AnimationDataRec");
	apply_type(0x00AD30EC, "WowClientDB_AreaGroupRec");
	apply_type(0x00AD3110, "WowClientDB_AreaPOIRec");
	apply_type(0x00AD3134, "WowClientDB_AreaTableRec");
	apply_type(0x00AD3158, "WowClientDB_AreaTriggerRec");
	apply_type(0x00AD317C, "WowClientDB_AttackAnimKitsRec");
	apply_type(0x00AD31A0, "WowClientDB_AttackAnimTypesRec");
	apply_type(0x00AD31C4, "WowClientDB_AuctionHouseRec");
	apply_type(0x00AD31E8, "WowClientDB_BankBagSlotPricesRec");
	apply_type(0x00AD320C, "WowClientDB_BannedAddOnsRec");
	apply_type(0x00AD3230, "WowClientDB_BarberShopStyleRec");
	apply_type(0x00AD3254, "WowClientDB_BattlemasterListRec");
	apply_type(0x00AD3278, "WowClientDB_CameraShakesRec");
	apply_type(0x00AD329C, "WowClientDB_Cfg_CategoriesRec");
	apply_type(0x00AD32C0, "WowClientDB_Cfg_ConfigsRec");
	apply_type(0x00AD32E4, "WowClientDB_CharBaseInfoRec");
	apply_type(0x00AD3308, "WowClientDB_CharHairGeosetsRec");
	apply_type(0x00AD332C, "WowClientDB_CharSectionsRec");
	apply_type(0x00AD3350, "WowClientDB_CharStartOutfitRec");
	apply_type(0x00AD3374, "WowClientDB_CharTitlesRec");
	apply_type(0x00AD3398, "WowClientDB_CharacterFacialHairStylesRec");
	apply_type(0x00AD33BC, "WowClientDB_ChatChannelsRec");
	apply_type(0x00AD33E0, "WowClientDB_ChatProfanityRec");
	apply_type(0x00AD3404, "WowClientDB_ChrClassesRec");
	apply_type(0x00AD3428, "WowClientDB_ChrRacesRec");
	apply_type(0x00AD344C, "WowClientDB_CinematicCameraRec");
	apply_type(0x00AD3470, "WowClientDB_CinematicSequencesRec");
	apply_type(0x00AD3494, "WowClientDB_CreatureDisplayInfoExtraRec");
	apply_type(0x00AD34B8, "WowClientDB_CreatureDisplayInfoRec");
	apply_type(0x00AD34DC, "WowClientDB_CreatureFamilyRec");
	apply_type(0x00AD3500, "WowClientDB_CreatureModelDataRec");
	apply_type(0x00AD3524, "WowClientDB_CreatureMovementInfoRec");
	apply_type(0x00AD3548, "WowClientDB_CreatureSoundDataRec");
	apply_type(0x00AD356C, "WowClientDB_CreatureSpellDataRec");
	apply_type(0x00AD3590, "WowClientDB_CreatureTypeRec");
	apply_type(0x00AD35B4, "WowClientDB_CurrencyTypesRec");
	apply_type(0x00AD35D8, "WowClientDB_CurrencyCategoryRec");
	apply_type(0x00AD35FC, "WowClientDB_DanceMovesRec");
	apply_type(0x00AD3620, "WowClientDB_DeathThudLookupsRec");
	apply_type(0x00AD368C, "WowClientDB_DestructibleModelDataRec");
	apply_type(0x00AD36B0, "WowClientDB_DungeonEncounterRec");
	apply_type(0x00AD36D4, "WowClientDB_DungeonMapRec");
	apply_type(0x00AD36F8, "WowClientDB_DungeonMapChunkRec");
	apply_type(0x00AD371C, "WowClientDB_DurabilityCostsRec");
	apply_type(0x00AD3740, "WowClientDB_DurabilityQualityRec");
	apply_type(0x00AD3764, "WowClientDB_EmotesRec");
	apply_type(0x00AD3788, "WowClientDB_EmotesTextDataRec");
	apply_type(0x00AD37AC, "WowClientDB_EmotesTextSoundRec");
	apply_type(0x00AD37D0, "WowClientDB_EmotesTextRec");
	apply_type(0x00AD37F4, "WowClientDB_EnvironmentalDamageRec");
	apply_type(0x00AD3818, "WowClientDB_ExhaustionRec");
	apply_type(0x00AD383C, "WowClientDB_FactionGroupRec");
	apply_type(0x00AD3860, "WowClientDB_FactionRec");
	apply_type(0x00AD3884, "WowClientDB_FactionTemplateRec");
	apply_type(0x00AD38A8, "WowClientDB_FileDataRec");
	apply_type(0x00AD38CC, "WowClientDB_FootprintTexturesRec");
	apply_type(0x00AD38F0, "WowClientDB_FootstepTerrainLookupRec");
	apply_type(0x00AD3914, "WowClientDB_GameObjectArtKitRec");
	apply_type(0x00AD3938, "WowClientDB_GameObjectDisplayInfoRec");
	apply_type(0x00AD395C, "WowClientDB_GameTablesRec");
	apply_type(0x00AD3980, "WowClientDB_GameTipsRec");
	apply_type(0x00AD39A4, "WowClientDB_GemPropertiesRec");
	apply_type(0x00AD39C8, "WowClientDB_GlyphPropertiesRec");
	apply_type(0x00AD39EC, "WowClientDB_GlyphSlotRec");
	apply_type(0x00AD3A10, "WowClientDB_GMSurveyAnswersRec");
	apply_type(0x00AD3A34, "WowClientDB_GMSurveyCurrentSurveyRec");
	apply_type(0x00AD3A58, "WowClientDB_GMSurveyQuestionsRec");
	apply_type(0x00AD3A7C, "WowClientDB_GMSurveySurveysRec");
	apply_type(0x00AD3AA0, "WowClientDB_GMTicketCategoryRec");
	apply_type(0x00AD3AC4, "WowClientDB_GroundEffectDoodadRec");
	apply_type(0x00AD3AE8, "WowClientDB_GroundEffectTextureRec");
	apply_type(0x00AD3B0C, "WowClientDB_gtBarberShopCostBaseRec");
	apply_type(0x00AD3B30, "WowClientDB_gtCombatRatingsRec");
	apply_type(0x00AD3B54, "WowClientDB_gtChanceToMeleeCritRec");
	apply_type(0x00AD3B78, "WowClientDB_gtChanceToMeleeCritBaseRec");
	apply_type(0x00AD3B9C, "WowClientDB_gtChanceToSpellCritRec");
	apply_type(0x00AD3BC0, "WowClientDB_gtChanceToSpellCritBaseRec");
	apply_type(0x00AD3BE4, "WowClientDB_gtNPCManaCostScalerRec");
	apply_type(0x00AD3C08, "WowClientDB_gtOCTClassCombatRatingScalarRec");
	apply_type(0x00AD3C2C, "WowClientDB_gtOCTRegenHPRec");
	apply_type(0x00AD3C50, "WowClientDB_gtOCTRegenMPRec");
	apply_type(0x00AD3C74, "WowClientDB_gtRegenHPPerSptRec");
	apply_type(0x00AD3C98, "WowClientDB_gtRegenMPPerSptRec");
	apply_type(0x00AD3CBC, "WowClientDB_HelmetGeosetVisDataRec");
	apply_type(0x00AD3CE0, "WowClientDB_HolidayDescriptionsRec");
	apply_type(0x00AD3D04, "WowClientDB_HolidayNamesRec");
	apply_type(0x00AD3D28, "WowClientDB_HolidaysRec");
	apply_type(0x00AD3D4C, "WowClientDB_ItemRec");
	apply_type(0x00AD3D70, "WowClientDB_ItemBagFamilyRec");
	apply_type(0x00AD3D94, "WowClientDB_ItemClassRec");
	apply_type(0x00AD3DB8, "WowClientDB_ItemCondExtCostsRec");
	apply_type(0x00AD3DDC, "WowClientDB_ItemDisplayInfoRec");
	apply_type(0x00AD3E00, "WowClientDB_ItemExtendedCostRec");
	apply_type(0x00AD3E24, "WowClientDB_ItemGroupSoundsRec");
	apply_type(0x00AD3E48, "WowClientDB_ItemLimitCategoryRec");
	apply_type(0x00AD3E6C, "WowClientDB_ItemPetFoodRec");
	apply_type(0x00AD3E90, "WowClientDB_ItemPurchaseGroupRec");
	apply_type(0x00AD3EB4, "WowClientDB_ItemRandomPropertiesRec");
	apply_type(0x00AD3ED8, "WowClientDB_ItemRandomSuffixRec");
	apply_type(0x00AD3EFC, "WowClientDB_ItemSetRec");
	apply_type(0x00AD3F20, "WowClientDB_ItemSubClassMaskRec");
	apply_type(0x00AD3F44, "WowClientDB_ItemSubClassRec");
	apply_type(0x00AD3F68, "WowClientDB_ItemVisualEffectsRec");
	apply_type(0x00AD3F8C, "WowClientDB_ItemVisualsRec");
	apply_type(0x00AD3FB0, "WowClientDB_LanguageWordsRec");
	apply_type(0x00AD3FD4, "WowClientDB_LanguagesRec");
	apply_type(0x00AD3FF8, "WowClientDB_LfgDungeonExpansionRec");
	apply_type(0x00AD401C, "WowClientDB_LfgDungeonGroupRec");
	apply_type(0x00AD4040, "WowClientDB_LfgDungeonsRec");
	apply_type(0x00AD4064, "WowClientDB_LiquidTypeRec");
	apply_type(0x00AD4088, "WowClientDB_LiquidMaterialRec");
	apply_type(0x00AD40AC, "WowClientDB_LoadingScreensRec");
	apply_type(0x00AD40D0, "WowClientDB_LoadingScreenTaxiSplinesRec");
	apply_type(0x00AD40F4, "WowClientDB_LockRec");
	apply_type(0x00AD4118, "WowClientDB_LockTypeRec");
	apply_type(0x00AD413C, "WowClientDB_MailTemplateRec");
	apply_type(0x00AD4160, "WowClientDB_MapRec");
	apply_type(0x00AD4184, "WowClientDB_MapDifficultyRec");
	apply_type(0x00AD41A8, "WowClientDB_MaterialRec");
	apply_type(0x00AD41CC, "WowClientDB_MovieRec");
	apply_type(0x00AD41F0, "WowClientDB_MovieFileDataRec");
	apply_type(0x00AD4214, "WowClientDB_MovieVariationRec");
	apply_type(0x00AD4238, "WowClientDB_NameGenRec");
	apply_type(0x00AD425C, "WowClientDB_NPCSoundsRec");
	apply_type(0x00AD4280, "WowClientDB_NamesProfanityRec");
	apply_type(0x00AD42A4, "WowClientDB_NamesReservedRec");
	apply_type(0x00AD42C8, "WowClientDB_OverrideSpellDataRec");
	apply_type(0x00AD42EC, "WowClientDB_PackageRec");
	apply_type(0x00AD4310, "WowClientDB_PageTextMaterialRec");
	apply_type(0x00AD4334, "WowClientDB_PaperDollItemFrameRec");
	apply_type(0x00AD4358, "WowClientDB_ParticleColorRec");
	apply_type(0x00AD437C, "WowClientDB_PetPersonalityRec");
	apply_type(0x00AD43A0, "WowClientDB_PowerDisplayRec");
	apply_type(0x00AD43C4, "WowClientDB_PvpDifficultyRec");
	apply_type(0x00AD43E8, "WowClientDB_QuestFactionRewardRec");
	apply_type(0x00AD440C, "WowClientDB_QuestInfoRec");
	apply_type(0x00AD4430, "WowClientDB_QuestSortRec");
	apply_type(0x00AD4454, "WowClientDB_QuestXPRec");
	apply_type(0x00AD4478, "WowClientDB_ResistancesRec");
	apply_type(0x00AD449C, "WowClientDB_RandPropPointsRec");
	apply_type(0x00AD44C0, "WowClientDB_ScalingStatDistributionRec");
	apply_type(0x00AD44E4, "WowClientDB_ScalingStatValuesRec");
	apply_type(0x00AD4508, "WowClientDB_ScreenEffectRec");
	apply_type(0x00AD452C, "WowClientDB_ServerMessagesRec");
	apply_type(0x00AD4550, "WowClientDB_SheatheSoundLookupsRec");
	apply_type(0x00AD4574, "WowClientDB_SkillCostsDataRec");
	apply_type(0x00AD4598, "WowClientDB_SkillLineAbilityRec");
	apply_type(0x00AD45BC, "WowClientDB_SkillLineCategoryRec");
	apply_type(0x00AD45E0, "WowClientDB_SkillLineRec");
	apply_type(0x00AD4604, "WowClientDB_SkillRaceClassInfoRec");
	apply_type(0x00AD4628, "WowClientDB_SkillTiersRec");
	apply_type(0x00AD464C, "WowClientDB_SoundAmbienceRec");
	apply_type(0x00AD4670, "WowClientDB_SoundEntriesRec");
	apply_type(0x00AD4694, "WowClientDB_SoundEmittersRec");
	apply_type(0x00AD46B8, "WowClientDB_SoundProviderPreferencesRec");
	apply_type(0x00AD46DC, "WowClientDB_SoundSamplePreferencesRec");
	apply_type(0x00AD4700, "WowClientDB_SoundWaterTypeRec");
	apply_type(0x00AD4724, "WowClientDB_SpamMessagesRec");
	apply_type(0x00AD4748, "WowClientDB_SpellCastTimesRec");
	apply_type(0x00AD476C, "WowClientDB_SpellCategoryRec");
	apply_type(0x00AD4790, "WowClientDB_SpellChainEffectsRec");
	apply_type(0x00AD47B4, "WowClientDB_SpellDescriptionVariablesRec");
	apply_type(0x00AD47D8, "WowClientDB_SpellDifficultyRec");
	apply_type(0x00AD47FC, "WowClientDB_SpellDispelTypeRec");
	apply_type(0x00AD4820, "WowClientDB_SpellDurationRec");
	apply_type(0x00AD4844, "WowClientDB_SpellEffectCameraShakesRec");
	apply_type(0x00AD4868, "WowClientDB_SpellFocusObjectRec");
	apply_type(0x00AD488C, "WowClientDB_SpellIconRec");
	apply_type(0x00AD48B0, "WowClientDB_SpellItemEnchantmentRec");
	apply_type(0x00AD48D4, "WowClientDB_SpellItemEnchantmentConditionRec");
	apply_type(0x00AD48F8, "WowClientDB_SpellMechanicRec");
	apply_type(0x00AD491C, "WowClientDB_SpellMissileRec");
	apply_type(0x00AD4940, "WowClientDB_SpellMissileMotionRec");
	apply_type(0x00AD4964, "WowClientDB_SpellRadiusRec");
	apply_type(0x00AD4988, "WowClientDB_SpellRangeRec");
	apply_type(0x00AD49AC, "WowClientDB_SpellRuneCostRec");
	apply_type(0x00AD49D0, "WowClientDB_SpellRec");
	apply_type(0x00AD49F4, "WowClientDB_SpellShapeshiftFormRec");
	apply_type(0x00AD4A18, "WowClientDB_SpellVisualEffectNameRec");
	apply_type(0x00AD4A3C, "WowClientDB_SpellVisualKitRec");
	apply_type(0x00AD4A60, "WowClientDB_SpellVisualKitAreaModelRec");
	apply_type(0x00AD4A84, "WowClientDB_SpellVisualKitModelAttachRec");
	apply_type(0x00AD4AA8, "WowClientDB_SpellVisualRec");
	apply_type(0x00AD4ACC, "WowClientDB_StableSlotPricesRec");
	apply_type(0x00AD4AF0, "WowClientDB_StationeryRec");
	apply_type(0x00AD4B14, "WowClientDB_StringLookupsRec");
	apply_type(0x00AD4B38, "WowClientDB_SummonPropertiesRec");
	apply_type(0x00AD4B5C, "WowClientDB_TalentRec");
	apply_type(0x00AD4B80, "WowClientDB_TalentTabRec");
	apply_type(0x00AD4BA4, "WowClientDB_TaxiNodesRec");
	apply_type(0x00AD4BC8, "WowClientDB_TaxiPathNodeRec");
	apply_type(0x00AD4BEC, "WowClientDB_TaxiPathRec");
	apply_type(0x00AD4C10, "WowClientDB_TeamContributionPointsRec");
	apply_type(0x00AD4C34, "WowClientDB_TerrainTypeRec");
	apply_type(0x00AD4C58, "WowClientDB_TerrainTypeSoundsRec");
	apply_type(0x00AD4C7C, "WowClientDB_TotemCategoryRec");
	apply_type(0x00AD4CA0, "WowClientDB_TransportAnimationRec");
	apply_type(0x00AD4CC4, "WowClientDB_TransportPhysicsRec");
	apply_type(0x00AD4CE8, "WowClientDB_TransportRotationRec");
	apply_type(0x00AD4D0C, "WowClientDB_UISoundLookupsRec");
	apply_type(0x00AD4D30, "WowClientDB_UnitBloodLevelsRec");
	apply_type(0x00AD4D54, "WowClientDB_UnitBloodRec");
	apply_type(0x00AD4D78, "WowClientDB_VehicleRec");
	apply_type(0x00AD4D9C, "WowClientDB_VehicleSeatRec");
	apply_type(0x00AD4DC0, "WowClientDB_VehicleUIIndicatorRec");
	apply_type(0x00AD4DE4, "WowClientDB_VehicleUIIndSeatRec");
	apply_type(0x00AD4E08, "WowClientDB_VocalUISoundsRec");
	apply_type(0x00AD4E2C, "WowClientDB_WMOAreaTableRec");
	apply_type(0x00AD4E50, "WowClientDB_WeaponImpactSoundsRec");
	apply_type(0x00AD4E74, "WowClientDB_WeaponSwingSounds2Rec");
	apply_type(0x00AD4E98, "WowClientDB_WeatherRec");
	apply_type(0x00AD4EBC, "WowClientDB_WorldMapAreaRec");
	apply_type(0x00AD4EE0, "WowClientDB_WorldMapContinentRec");
	apply_type(0x00AD4F04, "WowClientDB_WorldMapOverlayRec");
	apply_type(0x00AD4F28, "WowClientDB_WorldMapTransformsRec");
	apply_type(0x00AD4F4C, "WowClientDB_WorldSafeLocsRec");
	apply_type(0x00AD4F70, "WowClientDB_WorldStateUIRec");
	apply_type(0x00AD4F94, "WowClientDB_ZoneIntroMusicTableRec");
	apply_type(0x00AD4FB8, "WowClientDB_ZoneMusicRec");
	apply_type(0x00AD4FDC, "WowClientDB_WorldStateZoneSoundsRec");
	apply_type(0x00AD5000, "WowClientDB_WorldChunkSoundsRec");
	apply_type(0x00AD5024, "WowClientDB_SoundEntriesAdvancedRec");
	apply_type(0x00AD5048, "WowClientDB_ObjectEffectRec");
	apply_type(0x00AD506C, "WowClientDB_ObjectEffectGroupRec");
	apply_type(0x00AD5090, "WowClientDB_ObjectEffectModifierRec");
	apply_type(0x00AD50B4, "WowClientDB_ObjectEffectPackageRec");
	apply_type(0x00AD50D8, "WowClientDB_ObjectEffectPackageElemRec");
	apply_type(0x00AD50FC, "WowClientDB_SoundFilterRec");
	apply_type(0x00AD5120, "WowClientDB_SoundFilterElemRec");
	apply_type(0x00AD87C4, "char*[8]");
	apply_type(0x00AD87E4, "char*[6]");
	apply_type(0x00AD8BC0, "C2iVector");
	apply_type(0x00AD8EF0, "EGxTexFormat[13]");
	apply_type(0x00AD8F24, "D3DDECLTYPE[7]");
	apply_type(0x00AD8F40, "D3DTEXTUREFILTERTYPE[6][3]");
	apply_type(0x00AD8F88, "uint32_t");
	apply_type(0x00AD90B0, "uint8_t[16]");
	apply_type(0x00AD90C0, "uint8_t[2]");
	apply_type(0x00ADBAB4, "RECTF");
	apply_type(0x00ADBAC4, "KEY");
	apply_type(0x00ADBAC8, "int32_t");
	apply_type(0x00ADBACC, "float");
	apply_type(0x00ADBAD4, "RECTF");
	apply_type(0x00ADBAE4, "uint32_t");
	apply_type(0x00ADBBB0, "TSList_CONSOLELINE");
	apply_type(0x00ADBE54, "SoundHardware");
	apply_type(0x00ADBE5C, "uint32_t[4]");
	apply_type(0x00ADBE6C, "uint8_t[2][2]");
	apply_type(0x00ADBE70, "uint32_t[2][2]");
	apply_type(0x00ADBE80, "float[4][2]");
	apply_type(0x00ADBEA0, "float[4][2]");
	apply_type(0x00ADBEC0, "float[4][2]");
	apply_type(0x00ADBEE0, "float[4][2]");
	apply_type(0x00ADBF00, "float[5][2]");
	apply_type(0x00ADBF88, "WowClientDB_VideoHardwareRec");
	apply_type(0x00AF4998, "WowClientDB_LightSkyboxRec");
	apply_type(0x00AF49BC, "WowClientDB_LightIntBandRec");
	apply_type(0x00AF49E0, "WowClientDB_LightFloatBandRec");
	apply_type(0x00AF4A04, "WowClientDB_LightParamsRec");
	apply_type(0x00AF4A28, "WowClientDB_LightRec");
	apply_type(0x00B1D2AC, "int32_t");
	apply_type(0x00B23770, "int32_t");
	apply_type(0x00B23778, "NvApi__InterfaceTable[253]");
	apply_type(0x00B2F000, "CVar*");
	apply_type(0x00B2F004, "CVar*");
	apply_type(0x00B2F008, "CVar*");
	apply_type(0x00B2F00C, "CVar*");
	apply_type(0x00B2F010, "CVar*");
	apply_type(0x00B2F014, "CVar*");
	apply_type(0x00B2F018, "CVar*");
	apply_type(0x00B2F01C, "CVar*");
	apply_type(0x00B2F020, "CVar*");
	apply_type(0x00B2F024, "CVar*");
	apply_type(0x00B2F028, "CVar*");
	apply_type(0x00B2F02C, "CVar*");
	apply_type(0x00B2F030, "CVar*");
	apply_type(0x00B2F034, "CVar*");
	apply_type(0x00B2F038, "CVar*");
	apply_type(0x00B2F03C, "CVar*");
	apply_type(0x00B2F04C, "CVar*");
	apply_type(0x00B2F85C, "CVar*");
	apply_type(0x00B2F960, "CVar*");
	apply_type(0x00B2F964, "CVar*");
	apply_type(0x00B2F968, "CVar*");
	apply_type(0x00B2F96C, "CVar*");
	apply_type(0x00B2F970, "CVar*");
	apply_type(0x00B2F974, "CVar*");
	apply_type(0x00B2F978, "CVar*");
	apply_type(0x00B2F97C, "CVar*");
	apply_type(0x00B2F980, "CVar*");
	apply_type(0x00B2F984, "CVar*");
	apply_type(0x00B2F98C, "CVar*");
	apply_type(0x00B2F990, "CVar*");
	apply_type(0x00B2F994, "HEVENTCONTEXT");
	apply_type(0x00B2F9EC, "CVar*");
	apply_type(0x00B2F9F0, "CVar*");
	apply_type(0x00B2F9F4, "CVar*");
	apply_type(0x00B2F9F8, "CVar*");
	apply_type(0x00B2F9FC, "CVar*");
	apply_type(0x00B2FA00, "CVar*");
	apply_type(0x00B2FA08, "CVar*");
	apply_type(0x00B38180, "bool");
	apply_type(0x00B38181, "bool");
	apply_type(0x00B38A5C, "Blizzard__Lock__DoOnceData");
	apply_type(0x00B38A64, "Blizzard__Lock__DoOnceData");
	apply_type(0x00B41670, "TInstanceIdTable_EvtContext");
	apply_type(0x00B417C8, "uint32_t");
	apply_type(0x00B417CC, "int32_t");
	apply_type(0x00B417D0, "int32_t");
	apply_type(0x00B417D4, "int32_t");
	apply_type(0x00B417D8, "EvtThread**");
	apply_type(0x00B417DC, "SCritSect*");
	apply_type(0x00B417E8, "SCritSect");
	apply_type(0x00B41824, "SEvent");
	apply_type(0x00B41850, "CDataRecycler");
	apply_type(0x00B4AFBC, "CVar*");
	apply_type(0x00B6A9DC, "MipBits*");
	apply_type(0x00BD08E4, "CVar*");
	apply_type(0x00BD08E8, "CVar*");
	apply_type(0x00BD08EC, "CVar*");
	apply_type(0x00BD08F0, "CVar*");
	apply_type(0x00BD08F8, "CVar*");
	apply_type(0x00BD08FC, "CVar*");
	apply_type(0x00BD0900, "CVar*");
	apply_type(0x00BD0904, "CVar*");
	apply_type(0x00BD0908, "CVar*");
	apply_type(0x00BD090C, "CVar*");
	apply_type(0x00BD0910, "CVar*");
	apply_type(0x00BD0914, "CVar*");
	apply_type(0x00BD0918, "CVar*");
	apply_type(0x00BD091C, "CVar*");
	apply_type(0x00BD0920, "CVar*");
	apply_type(0x00BD0924, "CVar*");
	apply_type(0x00BD0928, "CVar*");
	apply_type(0x00BD092C, "CVar*");
	apply_type(0x00BD0930, "CVar*");
	apply_type(0x00BD0934, "CVar*");
	apply_type(0x00BD0938, "CVar*");
	apply_type(0x00BD093C, "CVar*");
	apply_type(0x00BD0940, "CVar*");
	apply_type(0x00BD0944, "CVar*");
	apply_type(0x00BD094C, "CVar*");
	apply_type(0x00BD0950, "CVar*");
	apply_type(0x00BD0954, "CVar*");
	apply_type(0x00BD0958, "CVar*");
	apply_type(0x00BD095C, "CVar*");
	apply_type(0x00BD0960, "CVar*");
	apply_type(0x00BD0964, "CVar*");
	apply_type(0x00BD0968, "CVar*");
	apply_type(0x00BD096C, "CVar*");
	apply_type(0x00BD0970, "CVar*");
	apply_type(0x00BD0974, "CVar*");
	apply_type(0x00BD0978, "CVar*");
	apply_type(0x00BD097C, "CVar*");
	apply_type(0x00BD0980, "CVar*");
	apply_type(0x00BD0984, "CVar*");
	apply_type(0x00BD0988, "CVar*");
	apply_type(0x00BD098C, "CVar*");
	apply_type(0x00BD0990, "CVar*");
	apply_type(0x00BD0998, "CVar*");
	apply_type(0x00BD099C, "CVar*");
	apply_type(0x00BD09A0, "CVar*");
	apply_type(0x00BD09A4, "CVar*");
	apply_type(0x00BD09A8, "CVar*");
	apply_type(0x00BD09B0, "CVar*");
	apply_type(0x00BD09B8, "CVar*");
	apply_type(0x00BD09BC, "CVar*");
	apply_type(0x00BD09C0, "CVar*");
	apply_type(0x00BD09C4, "CVar*");
	apply_type(0x00BD09C8, "CVar*");
	apply_type(0x00BD09CC, "CVar*");
	apply_type(0x00BD09D0, "CVar*");
	apply_type(0x00BD09D4, "CVar*");
	apply_type(0x00BD09D8, "CVar*");
	apply_type(0x00BD09DC, "CVar*");
	apply_type(0x00BD09E0, "CVar*");
	apply_type(0x00BD09E4, "CVar*");
	apply_type(0x00BD09E8, "CVar*");
	apply_type(0x00BD09EC, "CVar*");
	apply_type(0x00BD09F0, "CVar*");
	apply_type(0x00BD09F4, "CVar*");
	apply_type(0x00BD09F8, "CVar*");
	apply_type(0x00BD09FC, "CVar*");
	apply_type(0x00BD0A00, "CVar*");
	apply_type(0x00BD0A04, "CVar*");
	apply_type(0x00BD0A08, "CVar*");
	apply_type(0x00BD0A0C, "CVar*");
	apply_type(0x00BD0A10, "CVar*");
	apply_type(0x00BD0A14, "CVar*");
	apply_type(0x00BD0A18, "CVar*");
	apply_type(0x00BD0A1C, "CVar*");
	apply_type(0x00BD0A20, "CVar*");
	apply_type(0x00BD0A24, "CVar*");
	apply_type(0x00BD0A28, "CVar*");
	apply_type(0x00BD0A2C, "CVar*");
	apply_type(0x00BD0A30, "CVar*");
	apply_type(0x00BD0A34, "CVar*");
	apply_type(0x00BD0A38, "CVar*");
	apply_type(0x00BD0A3C, "CVar*");
	apply_type(0x00BD0A40, "CVar*");
	apply_type(0x00BD0A44, "CVar*");
	apply_type(0x00BD0A48, "CVar*");
	apply_type(0x00BD0A4C, "CVar*");
	apply_type(0x00C1DC98, "uint32_t[144]");
	apply_type(0x00C1DED8, "uint32_t[144]");
	apply_type(0x00C1E118, "uint32_t[144]");
	apply_type(0x00C1E358, "uint32_t[144]");
	apply_type(0x00C23AFC, "CVar*");
	apply_type(0x00C2495C, "CVar*");
	apply_type(0x00C24970, "CVar*");
	apply_type(0x00C24974, "CVar*");
	apply_type(0x00C24978, "CVar*");
	apply_type(0x00C2497C, "CVar*");
	apply_type(0x00C24980, "CVar*");
	apply_type(0x00C24984, "CVar*");
	apply_type(0x00C24988, "CVar*");
	apply_type(0x00C2498C, "CVar*");
	apply_type(0x00C24990, "CVar*");
	apply_type(0x00C24994, "CVar*");
	apply_type(0x00C24998, "CVar*");
	apply_type(0x00C2499C, "CVar*");
	apply_type(0x00C249A0, "CVar*");
	apply_type(0x00C249A4, "CVar*");
	apply_type(0x00C249A8, "CVar*");
	apply_type(0x00C249AC, "CVar*");
	apply_type(0x00C249B0, "CVar*");
	apply_type(0x00C249B4, "CVar*");
	apply_type(0x00C249B8, "CVar*");
	apply_type(0x00C249BC, "CVar*");
	apply_type(0x00C24C18, "CVar*");
	apply_type(0x00C24C1C, "CVar*");
	apply_type(0x00C24DB0, "CVar*");
	apply_type(0x00C24DB4, "CVar*");
	apply_type(0x00C24DB8, "CVar*");
	apply_type(0x00C24DBC, "CVar*");
	apply_type(0x00C24DC0, "CVar*");
	apply_type(0x00C24DC4, "CVar*");
	apply_type(0x00C24E28, "CVar*");
	apply_type(0x00C24E2C, "CVar*");
	apply_type(0x00C24E30, "CVar*");
	apply_type(0x00C24E34, "CVar*");
	apply_type(0x00C24E38, "CVar*");
	apply_type(0x00C24E3C, "CVar*");
	apply_type(0x00C24E40, "CVar*");
	apply_type(0x00C24E44, "CVar*");
	apply_type(0x00C24E48, "CVar*");
	apply_type(0x00C24E4C, "CVar*");
	apply_type(0x00C24E50, "CVar*");
	apply_type(0x00C24E54, "CVar*");
	apply_type(0x00C24E58, "CVar*");
	apply_type(0x00C24E68, "CVar*");
	apply_type(0x00C24E6C, "CVar*");
	apply_type(0x00C24E70, "CVar*");
	apply_type(0x00C24E74, "CVar*");
	apply_type(0x00C24E78, "CVar*");
	apply_type(0x00C24E7C, "CVar*");
	apply_type(0x00C25CD0, "int8_t");
	apply_type(0x00C25DE8, "uint32_t[1024]");
	apply_type(0x00C26DE8, "CURSORMODE");
	apply_type(0x00C26DF0, "uint32_t[53][1024]");
	apply_type(0x00C5DE9C, "int32_t");
	apply_type(0x00C5DF74, "uint32_t");
	apply_type(0x00C5DF7C, "uint32_t");
	apply_type(0x00C5DF88, "CGxDevice*");
	apply_type(0x00C5FFF0, "float");
	apply_type(0x00C5FFF4, "uint32_t");
	apply_type(0x00C5FFF8, "HSLOG");
	apply_type(0x00C60300, "C2iVector");
	apply_type(0x00C60618, "uint32_t");
	apply_type(0x00C606B0, "D3DMATERIAL9");
	apply_type(0x00C606F8, "D3DLIGHT9");
	apply_type(0x00C60930, "BLIT_FUNCTION[13][13][4]");
	apply_type(0x00C613C4, "int32_t");
	apply_type(0x00C9ECC4, "CVar*");
	apply_type(0x00CA1194, "CVar*");
	apply_type(0x00CA12C8, "CVar*");
	apply_type(0x00CA12D0, "CVar*");
	apply_type(0x00CA1690, "float");
	apply_type(0x00CA1694, "int32_t");
	apply_type(0x00CA1718, "float");
	apply_type(0x00CA171C, "CGxString*");
	apply_type(0x00CA1720, "CONSOLELINE*");
	apply_type(0x00CA1724, "HLAYER");
	apply_type(0x00CA1728, "char[64]");
	apply_type(0x00CA1768, "char[260]");
	apply_type(0x00CA186C, "uint32_t");
	apply_type(0x00CA1870, "HLAYER");
	apply_type(0x00CA1874, "CGxStringBatch*");
	apply_type(0x00CA1878, "char[256]");
	apply_type(0x00CA1978, "int32_t");
	apply_type(0x00CA197C, "int32_t");
	apply_type(0x00CA1980, "int32_t");
	apply_type(0x00CA1984, "char*");
	apply_type(0x00CA198C, "HTEXTFONT");
	apply_type(0x00CA1990, "CONSOLERESIZESTATE");
	apply_type(0x00CA1994, "HIGHLIGHTSTATE");
	apply_type(0x00CA1998, "float");
	apply_type(0x00CA199C, "float");
	apply_type(0x00CA19A0, "uint32_t");
	apply_type(0x00CA19A4, "uint32_t");
	apply_type(0x00CA19A8, "float");
	apply_type(0x00CA19B0, "float");
	apply_type(0x00CA19B4, "SCritSect");
	apply_type(0x00CA19F0, "float");
	apply_type(0x00CA19F4, "char*");
	apply_type(0x00CA19F8, "bool");
	apply_type(0x00CA19F9, "bool");
	apply_type(0x00CA19FC, "TSHashTable_CVar_HASHKEY_STRI");
	apply_type(0x00CA3A28, "char[32][1024]");
	apply_type(0x00CABA28, "uint32_t");
	apply_type(0x00CABA2C, "COMMANDHANDLER");
	apply_type(0x00CABA30, "TSHashTable_CONSOLECOMMAND_HASHKEY_STRI");
	apply_type(0x00CABA98, "CVar*");
	apply_type(0x00CABA9C, "CVar*");
	apply_type(0x00CABAA0, "CVar*");
	apply_type(0x00CABAA4, "CVar*");
	apply_type(0x00CABAA8, "CVar*");
	apply_type(0x00CABAAC, "CVar*");
	apply_type(0x00CABAB0, "CVar*");
	apply_type(0x00CABAB4, "CVar*");
	apply_type(0x00CABAB8, "CVar*");
	apply_type(0x00CABABC, "CVar*");
	apply_type(0x00CABAC0, "CVar*");
	apply_type(0x00CABAC4, "CVar*");
	apply_type(0x00CABAC8, "int32_t[9]");
	apply_type(0x00CABAEC, "CVar*");
	apply_type(0x00CABAF0, "DefaultSettings");
	apply_type(0x00CABB30, "CVar*");
	apply_type(0x00CABB34, "CVar*");
	apply_type(0x00CABB38, "Hardware");
	apply_type(0x00CABB6C, "CVar*");
	apply_type(0x00CABB70, "CVar*");
	apply_type(0x00CABB74, "CVar*");
	apply_type(0x00CABB78, "CVar*");
	apply_type(0x00CABB7C, "uint32_t[9]");
	apply_type(0x00CABBA0, "CVar*");
	apply_type(0x00CABBA4, "CVar*");
	apply_type(0x00CABBA8, "CVar*");
	apply_type(0x00CABBAC, "CVar*");
	apply_type(0x00CABBB0, "CVar*");
	apply_type(0x00CABBB4, "CVar*");
	apply_type(0x00CABBB8, "char[256]");
	apply_type(0x00CABCB8, "CGxDevice*");
	apply_type(0x00CABCBC, "bool");
	apply_type(0x00CABCBD, "bool");
	apply_type(0x00CABCBE, "bool");
	apply_type(0x00CABCC4, "int32_t");
	apply_type(0x00CABCC8, "TSGrowableArray_CGxMonitorMode");
	apply_type(0x00CABCD8, "CGxFormat");
	apply_type(0x00CABD40, "CGxFormat");
	apply_type(0x00CABDA8, "CGxFormat");
	apply_type(0x00CABE00, "CGxFormat");
	apply_type(0x00CABE98, "CGxFormat[5]");
	apply_type(0x00CAE950, "uint32_t");
	apply_type(0x00CAE954, "uint32_t");
	apply_type(0x00CAE958, "STORMOPTIONS");
	apply_type(0x00CB7220, "int32_t");
	apply_type(0x00CB732C, "CRITICAL_SECTION");
	apply_type(0x00CB7358, "CRITICAL_SECTION[4]");
	apply_type(0x00CD852C, "CVar*");
	apply_type(0x00CD856C, "CVar*");
	apply_type(0x00CD8574, "CVar*");
	apply_type(0x00CD8578, "CVar*");
	apply_type(0x00CD857C, "CVar*");
	apply_type(0x00CD8580, "CVar*");
	apply_type(0x00CD8584, "CVar*");
	apply_type(0x00CD858C, "CVar*");
	apply_type(0x00CD8590, "CVar*");
	apply_type(0x00CD8594, "CVar*");
	apply_type(0x00CD8598, "CVar*");
	apply_type(0x00CD859C, "CVar*");
	apply_type(0x00CD85A0, "CVar*");
	apply_type(0x00CD85A4, "CVar*");
	apply_type(0x00CD85A8, "CVar*");
	apply_type(0x00CD85AC, "CVar*");
	apply_type(0x00CD85B0, "CVar*");
	apply_type(0x00CD85B4, "CVar*");
	apply_type(0x00CD85B8, "CVar*");
	apply_type(0x00CD85BC, "CVar*");
	apply_type(0x00CD85C0, "CVar*");
	apply_type(0x00CD85C4, "CVar*");
	apply_type(0x00CD85C8, "CVar*");
	apply_type(0x00CD85CC, "CVar*");
	apply_type(0x00CD85D0, "CVar*");
	apply_type(0x00CD85D4, "CVar*");
	apply_type(0x00CD85D8, "CVar*");
	apply_type(0x00CD85DC, "CVar*");
	apply_type(0x00CD85E0, "CVar*");
	apply_type(0x00CD85E4, "CVar*");
	apply_type(0x00D25308, "CVar*");
	apply_type(0x00D25310, "CVar*");
	apply_type(0x00D25314, "CVar*");
	apply_type(0x00D3804C, "CVar*");
	apply_type(0x00D38AC8, "CVar*");
	apply_type(0x00D3F798, "int32_t");
	apply_type(0x00D41580, "int32_t");
	apply_type(0x00D4159C, "OsTimeManager*");
	apply_type(0x00D415A0, "int32_t");
	apply_type(0x00D415A4, "int32_t");
	apply_type(0x00D415A8, "int32_t");
	apply_type(0x00D415AC, "int32_t");
	apply_type(0x00D415B0, "int32_t");
	apply_type(0x00D415B4, "int32_t");
	apply_type(0x00D415C0, "int32_t");
	apply_type(0x00D415C4, "uint32_t");
	apply_type(0x00D415C8, "uint64_t");
	apply_type(0x00D415D0, "int32_t");
	apply_type(0x00D415D4, "int32_t");
	apply_type(0x00D43020, "int32_t");
}
